// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package prodvana

import (
	"context"
	"reflect"

	"github.com/prodvana/pulumi-prodvana/sdk/go/prodvana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ManagedK8sRuntime struct {
	pulumi.CustomResourceState

	// Environment variables to pass to the agent. Useful for cases like passing proxy configuration to the agent if needed.
	AgentEnv pulumi.StringMapOutput `pulumi:"agentEnv"`
	// If the agent has been set to be externally managed. This should be false since this is the managed*k8s*runtime resource -- this is used to detect out of band changes to the agent deployment
	AgentExternallyManaged pulumi.BoolOutput `pulumi:"agentExternallyManaged"`
	// The namespace of the agent
	AgentNamespace pulumi.StringOutput `pulumi:"agentNamespace"`
	// The runtime identifier of the agent
	AgentRuntimeId pulumi.StringOutput `pulumi:"agentRuntimeId"`
	// PEM-encoded client certificate for TLS authentication.
	ClientCertificate pulumi.StringOutput `pulumi:"clientCertificate"`
	// PEM-encoded client certificate key for TLS authentication.
	ClientKey pulumi.StringOutput `pulumi:"clientKey"`
	// PEM-encoded root certificates bundle for TLS authentication.
	ClusterCaCertificate pulumi.StringOutput `pulumi:"clusterCaCertificate"`
	// Context to use from the kube config file.
	ConfigContext pulumi.StringOutput `pulumi:"configContext"`
	// Authentication info context of the kube config (name of the kubeconfig user, `--user` flag in `kubectl`).
	ConfigContextAuthInfo pulumi.StringOutput `pulumi:"configContextAuthInfo"`
	// Cluster context of the kube config (name of the kubeconfig cluster, `--cluster` flag in `kubectl`).
	ConfigContextCluster pulumi.StringOutput `pulumi:"configContextCluster"`
	// Path to the kube config file.
	ConfigPath pulumi.StringOutput `pulumi:"configPath"`
	// A list of paths to kube config files.
	ConfigPaths pulumi.StringArrayOutput `pulumi:"configPaths"`
	// Exec configuration for authentication to the Kubernetes cluster
	Exec ManagedK8sRuntimeExecPtrOutput `pulumi:"exec"`
	// The address of the Kubernetes cluster (scheme://hostname:port)
	Host pulumi.StringOutput `pulumi:"host"`
	// Whether server should be accessed without verifying the TLS certificate
	Insecure pulumi.BoolOutput `pulumi:"insecure"`
	// List of labels to apply to the runtime
	Labels ManagedK8sRuntimeLabelArrayOutput `pulumi:"labels"`
	// Runtime name
	Name pulumi.StringOutput `pulumi:"name"`
	// Password for basic authentication to the Kubernetes cluster
	Password pulumi.StringOutput `pulumi:"password"`
	// Proxy URL to use when accessing the Kubernetes cluster
	ProxyUrl pulumi.StringOutput `pulumi:"proxyUrl"`
	// How long to wait for the runtime linking to complete. A valid Go duration string, e.g. `10m` or `1h`. Defaults to `10m`
	Timeout pulumi.StringOutput `pulumi:"timeout"`
	// Server name passed to the server for SNI and is used in the client to check server certificates against
	TlsServerName pulumi.StringOutput `pulumi:"tlsServerName"`
	// Token to authenticate an service account
	Token pulumi.StringOutput `pulumi:"token"`
	// Username for basic authentication to the Kubernetes cluster
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewManagedK8sRuntime registers a new resource with the given unique name, arguments, and options.
func NewManagedK8sRuntime(ctx *pulumi.Context,
	name string, args *ManagedK8sRuntimeArgs, opts ...pulumi.ResourceOption) (*ManagedK8sRuntime, error) {
	if args == nil {
		args = &ManagedK8sRuntimeArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ManagedK8sRuntime
	err := ctx.RegisterResource("prodvana:index/managedK8sRuntime:ManagedK8sRuntime", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetManagedK8sRuntime gets an existing ManagedK8sRuntime resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetManagedK8sRuntime(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ManagedK8sRuntimeState, opts ...pulumi.ResourceOption) (*ManagedK8sRuntime, error) {
	var resource ManagedK8sRuntime
	err := ctx.ReadResource("prodvana:index/managedK8sRuntime:ManagedK8sRuntime", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ManagedK8sRuntime resources.
type managedK8sRuntimeState struct {
	// Environment variables to pass to the agent. Useful for cases like passing proxy configuration to the agent if needed.
	AgentEnv map[string]string `pulumi:"agentEnv"`
	// If the agent has been set to be externally managed. This should be false since this is the managed*k8s*runtime resource -- this is used to detect out of band changes to the agent deployment
	AgentExternallyManaged *bool `pulumi:"agentExternallyManaged"`
	// The namespace of the agent
	AgentNamespace *string `pulumi:"agentNamespace"`
	// The runtime identifier of the agent
	AgentRuntimeId *string `pulumi:"agentRuntimeId"`
	// PEM-encoded client certificate for TLS authentication.
	ClientCertificate *string `pulumi:"clientCertificate"`
	// PEM-encoded client certificate key for TLS authentication.
	ClientKey *string `pulumi:"clientKey"`
	// PEM-encoded root certificates bundle for TLS authentication.
	ClusterCaCertificate *string `pulumi:"clusterCaCertificate"`
	// Context to use from the kube config file.
	ConfigContext *string `pulumi:"configContext"`
	// Authentication info context of the kube config (name of the kubeconfig user, `--user` flag in `kubectl`).
	ConfigContextAuthInfo *string `pulumi:"configContextAuthInfo"`
	// Cluster context of the kube config (name of the kubeconfig cluster, `--cluster` flag in `kubectl`).
	ConfigContextCluster *string `pulumi:"configContextCluster"`
	// Path to the kube config file.
	ConfigPath *string `pulumi:"configPath"`
	// A list of paths to kube config files.
	ConfigPaths []string `pulumi:"configPaths"`
	// Exec configuration for authentication to the Kubernetes cluster
	Exec *ManagedK8sRuntimeExec `pulumi:"exec"`
	// The address of the Kubernetes cluster (scheme://hostname:port)
	Host *string `pulumi:"host"`
	// Whether server should be accessed without verifying the TLS certificate
	Insecure *bool `pulumi:"insecure"`
	// List of labels to apply to the runtime
	Labels []ManagedK8sRuntimeLabel `pulumi:"labels"`
	// Runtime name
	Name *string `pulumi:"name"`
	// Password for basic authentication to the Kubernetes cluster
	Password *string `pulumi:"password"`
	// Proxy URL to use when accessing the Kubernetes cluster
	ProxyUrl *string `pulumi:"proxyUrl"`
	// How long to wait for the runtime linking to complete. A valid Go duration string, e.g. `10m` or `1h`. Defaults to `10m`
	Timeout *string `pulumi:"timeout"`
	// Server name passed to the server for SNI and is used in the client to check server certificates against
	TlsServerName *string `pulumi:"tlsServerName"`
	// Token to authenticate an service account
	Token *string `pulumi:"token"`
	// Username for basic authentication to the Kubernetes cluster
	Username *string `pulumi:"username"`
}

type ManagedK8sRuntimeState struct {
	// Environment variables to pass to the agent. Useful for cases like passing proxy configuration to the agent if needed.
	AgentEnv pulumi.StringMapInput
	// If the agent has been set to be externally managed. This should be false since this is the managed*k8s*runtime resource -- this is used to detect out of band changes to the agent deployment
	AgentExternallyManaged pulumi.BoolPtrInput
	// The namespace of the agent
	AgentNamespace pulumi.StringPtrInput
	// The runtime identifier of the agent
	AgentRuntimeId pulumi.StringPtrInput
	// PEM-encoded client certificate for TLS authentication.
	ClientCertificate pulumi.StringPtrInput
	// PEM-encoded client certificate key for TLS authentication.
	ClientKey pulumi.StringPtrInput
	// PEM-encoded root certificates bundle for TLS authentication.
	ClusterCaCertificate pulumi.StringPtrInput
	// Context to use from the kube config file.
	ConfigContext pulumi.StringPtrInput
	// Authentication info context of the kube config (name of the kubeconfig user, `--user` flag in `kubectl`).
	ConfigContextAuthInfo pulumi.StringPtrInput
	// Cluster context of the kube config (name of the kubeconfig cluster, `--cluster` flag in `kubectl`).
	ConfigContextCluster pulumi.StringPtrInput
	// Path to the kube config file.
	ConfigPath pulumi.StringPtrInput
	// A list of paths to kube config files.
	ConfigPaths pulumi.StringArrayInput
	// Exec configuration for authentication to the Kubernetes cluster
	Exec ManagedK8sRuntimeExecPtrInput
	// The address of the Kubernetes cluster (scheme://hostname:port)
	Host pulumi.StringPtrInput
	// Whether server should be accessed without verifying the TLS certificate
	Insecure pulumi.BoolPtrInput
	// List of labels to apply to the runtime
	Labels ManagedK8sRuntimeLabelArrayInput
	// Runtime name
	Name pulumi.StringPtrInput
	// Password for basic authentication to the Kubernetes cluster
	Password pulumi.StringPtrInput
	// Proxy URL to use when accessing the Kubernetes cluster
	ProxyUrl pulumi.StringPtrInput
	// How long to wait for the runtime linking to complete. A valid Go duration string, e.g. `10m` or `1h`. Defaults to `10m`
	Timeout pulumi.StringPtrInput
	// Server name passed to the server for SNI and is used in the client to check server certificates against
	TlsServerName pulumi.StringPtrInput
	// Token to authenticate an service account
	Token pulumi.StringPtrInput
	// Username for basic authentication to the Kubernetes cluster
	Username pulumi.StringPtrInput
}

func (ManagedK8sRuntimeState) ElementType() reflect.Type {
	return reflect.TypeOf((*managedK8sRuntimeState)(nil)).Elem()
}

type managedK8sRuntimeArgs struct {
	// Environment variables to pass to the agent. Useful for cases like passing proxy configuration to the agent if needed.
	AgentEnv map[string]string `pulumi:"agentEnv"`
	// PEM-encoded client certificate for TLS authentication.
	ClientCertificate *string `pulumi:"clientCertificate"`
	// PEM-encoded client certificate key for TLS authentication.
	ClientKey *string `pulumi:"clientKey"`
	// PEM-encoded root certificates bundle for TLS authentication.
	ClusterCaCertificate *string `pulumi:"clusterCaCertificate"`
	// Context to use from the kube config file.
	ConfigContext *string `pulumi:"configContext"`
	// Authentication info context of the kube config (name of the kubeconfig user, `--user` flag in `kubectl`).
	ConfigContextAuthInfo *string `pulumi:"configContextAuthInfo"`
	// Cluster context of the kube config (name of the kubeconfig cluster, `--cluster` flag in `kubectl`).
	ConfigContextCluster *string `pulumi:"configContextCluster"`
	// Path to the kube config file.
	ConfigPath *string `pulumi:"configPath"`
	// A list of paths to kube config files.
	ConfigPaths []string `pulumi:"configPaths"`
	// Exec configuration for authentication to the Kubernetes cluster
	Exec *ManagedK8sRuntimeExec `pulumi:"exec"`
	// The address of the Kubernetes cluster (scheme://hostname:port)
	Host *string `pulumi:"host"`
	// Whether server should be accessed without verifying the TLS certificate
	Insecure *bool `pulumi:"insecure"`
	// List of labels to apply to the runtime
	Labels []ManagedK8sRuntimeLabel `pulumi:"labels"`
	// Runtime name
	Name *string `pulumi:"name"`
	// Password for basic authentication to the Kubernetes cluster
	Password *string `pulumi:"password"`
	// Proxy URL to use when accessing the Kubernetes cluster
	ProxyUrl *string `pulumi:"proxyUrl"`
	// How long to wait for the runtime linking to complete. A valid Go duration string, e.g. `10m` or `1h`. Defaults to `10m`
	Timeout *string `pulumi:"timeout"`
	// Server name passed to the server for SNI and is used in the client to check server certificates against
	TlsServerName *string `pulumi:"tlsServerName"`
	// Token to authenticate an service account
	Token *string `pulumi:"token"`
	// Username for basic authentication to the Kubernetes cluster
	Username *string `pulumi:"username"`
}

// The set of arguments for constructing a ManagedK8sRuntime resource.
type ManagedK8sRuntimeArgs struct {
	// Environment variables to pass to the agent. Useful for cases like passing proxy configuration to the agent if needed.
	AgentEnv pulumi.StringMapInput
	// PEM-encoded client certificate for TLS authentication.
	ClientCertificate pulumi.StringPtrInput
	// PEM-encoded client certificate key for TLS authentication.
	ClientKey pulumi.StringPtrInput
	// PEM-encoded root certificates bundle for TLS authentication.
	ClusterCaCertificate pulumi.StringPtrInput
	// Context to use from the kube config file.
	ConfigContext pulumi.StringPtrInput
	// Authentication info context of the kube config (name of the kubeconfig user, `--user` flag in `kubectl`).
	ConfigContextAuthInfo pulumi.StringPtrInput
	// Cluster context of the kube config (name of the kubeconfig cluster, `--cluster` flag in `kubectl`).
	ConfigContextCluster pulumi.StringPtrInput
	// Path to the kube config file.
	ConfigPath pulumi.StringPtrInput
	// A list of paths to kube config files.
	ConfigPaths pulumi.StringArrayInput
	// Exec configuration for authentication to the Kubernetes cluster
	Exec ManagedK8sRuntimeExecPtrInput
	// The address of the Kubernetes cluster (scheme://hostname:port)
	Host pulumi.StringPtrInput
	// Whether server should be accessed without verifying the TLS certificate
	Insecure pulumi.BoolPtrInput
	// List of labels to apply to the runtime
	Labels ManagedK8sRuntimeLabelArrayInput
	// Runtime name
	Name pulumi.StringPtrInput
	// Password for basic authentication to the Kubernetes cluster
	Password pulumi.StringPtrInput
	// Proxy URL to use when accessing the Kubernetes cluster
	ProxyUrl pulumi.StringPtrInput
	// How long to wait for the runtime linking to complete. A valid Go duration string, e.g. `10m` or `1h`. Defaults to `10m`
	Timeout pulumi.StringPtrInput
	// Server name passed to the server for SNI and is used in the client to check server certificates against
	TlsServerName pulumi.StringPtrInput
	// Token to authenticate an service account
	Token pulumi.StringPtrInput
	// Username for basic authentication to the Kubernetes cluster
	Username pulumi.StringPtrInput
}

func (ManagedK8sRuntimeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*managedK8sRuntimeArgs)(nil)).Elem()
}

type ManagedK8sRuntimeInput interface {
	pulumi.Input

	ToManagedK8sRuntimeOutput() ManagedK8sRuntimeOutput
	ToManagedK8sRuntimeOutputWithContext(ctx context.Context) ManagedK8sRuntimeOutput
}

func (*ManagedK8sRuntime) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedK8sRuntime)(nil)).Elem()
}

func (i *ManagedK8sRuntime) ToManagedK8sRuntimeOutput() ManagedK8sRuntimeOutput {
	return i.ToManagedK8sRuntimeOutputWithContext(context.Background())
}

func (i *ManagedK8sRuntime) ToManagedK8sRuntimeOutputWithContext(ctx context.Context) ManagedK8sRuntimeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedK8sRuntimeOutput)
}

// ManagedK8sRuntimeArrayInput is an input type that accepts ManagedK8sRuntimeArray and ManagedK8sRuntimeArrayOutput values.
// You can construct a concrete instance of `ManagedK8sRuntimeArrayInput` via:
//
//	ManagedK8sRuntimeArray{ ManagedK8sRuntimeArgs{...} }
type ManagedK8sRuntimeArrayInput interface {
	pulumi.Input

	ToManagedK8sRuntimeArrayOutput() ManagedK8sRuntimeArrayOutput
	ToManagedK8sRuntimeArrayOutputWithContext(context.Context) ManagedK8sRuntimeArrayOutput
}

type ManagedK8sRuntimeArray []ManagedK8sRuntimeInput

func (ManagedK8sRuntimeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagedK8sRuntime)(nil)).Elem()
}

func (i ManagedK8sRuntimeArray) ToManagedK8sRuntimeArrayOutput() ManagedK8sRuntimeArrayOutput {
	return i.ToManagedK8sRuntimeArrayOutputWithContext(context.Background())
}

func (i ManagedK8sRuntimeArray) ToManagedK8sRuntimeArrayOutputWithContext(ctx context.Context) ManagedK8sRuntimeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedK8sRuntimeArrayOutput)
}

// ManagedK8sRuntimeMapInput is an input type that accepts ManagedK8sRuntimeMap and ManagedK8sRuntimeMapOutput values.
// You can construct a concrete instance of `ManagedK8sRuntimeMapInput` via:
//
//	ManagedK8sRuntimeMap{ "key": ManagedK8sRuntimeArgs{...} }
type ManagedK8sRuntimeMapInput interface {
	pulumi.Input

	ToManagedK8sRuntimeMapOutput() ManagedK8sRuntimeMapOutput
	ToManagedK8sRuntimeMapOutputWithContext(context.Context) ManagedK8sRuntimeMapOutput
}

type ManagedK8sRuntimeMap map[string]ManagedK8sRuntimeInput

func (ManagedK8sRuntimeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagedK8sRuntime)(nil)).Elem()
}

func (i ManagedK8sRuntimeMap) ToManagedK8sRuntimeMapOutput() ManagedK8sRuntimeMapOutput {
	return i.ToManagedK8sRuntimeMapOutputWithContext(context.Background())
}

func (i ManagedK8sRuntimeMap) ToManagedK8sRuntimeMapOutputWithContext(ctx context.Context) ManagedK8sRuntimeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ManagedK8sRuntimeMapOutput)
}

type ManagedK8sRuntimeOutput struct{ *pulumi.OutputState }

func (ManagedK8sRuntimeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ManagedK8sRuntime)(nil)).Elem()
}

func (o ManagedK8sRuntimeOutput) ToManagedK8sRuntimeOutput() ManagedK8sRuntimeOutput {
	return o
}

func (o ManagedK8sRuntimeOutput) ToManagedK8sRuntimeOutputWithContext(ctx context.Context) ManagedK8sRuntimeOutput {
	return o
}

// Environment variables to pass to the agent. Useful for cases like passing proxy configuration to the agent if needed.
func (o ManagedK8sRuntimeOutput) AgentEnv() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ManagedK8sRuntime) pulumi.StringMapOutput { return v.AgentEnv }).(pulumi.StringMapOutput)
}

// If the agent has been set to be externally managed. This should be false since this is the managed*k8s*runtime resource -- this is used to detect out of band changes to the agent deployment
func (o ManagedK8sRuntimeOutput) AgentExternallyManaged() pulumi.BoolOutput {
	return o.ApplyT(func(v *ManagedK8sRuntime) pulumi.BoolOutput { return v.AgentExternallyManaged }).(pulumi.BoolOutput)
}

// The namespace of the agent
func (o ManagedK8sRuntimeOutput) AgentNamespace() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedK8sRuntime) pulumi.StringOutput { return v.AgentNamespace }).(pulumi.StringOutput)
}

// The runtime identifier of the agent
func (o ManagedK8sRuntimeOutput) AgentRuntimeId() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedK8sRuntime) pulumi.StringOutput { return v.AgentRuntimeId }).(pulumi.StringOutput)
}

// PEM-encoded client certificate for TLS authentication.
func (o ManagedK8sRuntimeOutput) ClientCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedK8sRuntime) pulumi.StringOutput { return v.ClientCertificate }).(pulumi.StringOutput)
}

// PEM-encoded client certificate key for TLS authentication.
func (o ManagedK8sRuntimeOutput) ClientKey() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedK8sRuntime) pulumi.StringOutput { return v.ClientKey }).(pulumi.StringOutput)
}

// PEM-encoded root certificates bundle for TLS authentication.
func (o ManagedK8sRuntimeOutput) ClusterCaCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedK8sRuntime) pulumi.StringOutput { return v.ClusterCaCertificate }).(pulumi.StringOutput)
}

// Context to use from the kube config file.
func (o ManagedK8sRuntimeOutput) ConfigContext() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedK8sRuntime) pulumi.StringOutput { return v.ConfigContext }).(pulumi.StringOutput)
}

// Authentication info context of the kube config (name of the kubeconfig user, `--user` flag in `kubectl`).
func (o ManagedK8sRuntimeOutput) ConfigContextAuthInfo() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedK8sRuntime) pulumi.StringOutput { return v.ConfigContextAuthInfo }).(pulumi.StringOutput)
}

// Cluster context of the kube config (name of the kubeconfig cluster, `--cluster` flag in `kubectl`).
func (o ManagedK8sRuntimeOutput) ConfigContextCluster() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedK8sRuntime) pulumi.StringOutput { return v.ConfigContextCluster }).(pulumi.StringOutput)
}

// Path to the kube config file.
func (o ManagedK8sRuntimeOutput) ConfigPath() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedK8sRuntime) pulumi.StringOutput { return v.ConfigPath }).(pulumi.StringOutput)
}

// A list of paths to kube config files.
func (o ManagedK8sRuntimeOutput) ConfigPaths() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ManagedK8sRuntime) pulumi.StringArrayOutput { return v.ConfigPaths }).(pulumi.StringArrayOutput)
}

// Exec configuration for authentication to the Kubernetes cluster
func (o ManagedK8sRuntimeOutput) Exec() ManagedK8sRuntimeExecPtrOutput {
	return o.ApplyT(func(v *ManagedK8sRuntime) ManagedK8sRuntimeExecPtrOutput { return v.Exec }).(ManagedK8sRuntimeExecPtrOutput)
}

// The address of the Kubernetes cluster (scheme://hostname:port)
func (o ManagedK8sRuntimeOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedK8sRuntime) pulumi.StringOutput { return v.Host }).(pulumi.StringOutput)
}

// Whether server should be accessed without verifying the TLS certificate
func (o ManagedK8sRuntimeOutput) Insecure() pulumi.BoolOutput {
	return o.ApplyT(func(v *ManagedK8sRuntime) pulumi.BoolOutput { return v.Insecure }).(pulumi.BoolOutput)
}

// List of labels to apply to the runtime
func (o ManagedK8sRuntimeOutput) Labels() ManagedK8sRuntimeLabelArrayOutput {
	return o.ApplyT(func(v *ManagedK8sRuntime) ManagedK8sRuntimeLabelArrayOutput { return v.Labels }).(ManagedK8sRuntimeLabelArrayOutput)
}

// Runtime name
func (o ManagedK8sRuntimeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedK8sRuntime) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Password for basic authentication to the Kubernetes cluster
func (o ManagedK8sRuntimeOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedK8sRuntime) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// Proxy URL to use when accessing the Kubernetes cluster
func (o ManagedK8sRuntimeOutput) ProxyUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedK8sRuntime) pulumi.StringOutput { return v.ProxyUrl }).(pulumi.StringOutput)
}

// How long to wait for the runtime linking to complete. A valid Go duration string, e.g. `10m` or `1h`. Defaults to `10m`
func (o ManagedK8sRuntimeOutput) Timeout() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedK8sRuntime) pulumi.StringOutput { return v.Timeout }).(pulumi.StringOutput)
}

// Server name passed to the server for SNI and is used in the client to check server certificates against
func (o ManagedK8sRuntimeOutput) TlsServerName() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedK8sRuntime) pulumi.StringOutput { return v.TlsServerName }).(pulumi.StringOutput)
}

// Token to authenticate an service account
func (o ManagedK8sRuntimeOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedK8sRuntime) pulumi.StringOutput { return v.Token }).(pulumi.StringOutput)
}

// Username for basic authentication to the Kubernetes cluster
func (o ManagedK8sRuntimeOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *ManagedK8sRuntime) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type ManagedK8sRuntimeArrayOutput struct{ *pulumi.OutputState }

func (ManagedK8sRuntimeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ManagedK8sRuntime)(nil)).Elem()
}

func (o ManagedK8sRuntimeArrayOutput) ToManagedK8sRuntimeArrayOutput() ManagedK8sRuntimeArrayOutput {
	return o
}

func (o ManagedK8sRuntimeArrayOutput) ToManagedK8sRuntimeArrayOutputWithContext(ctx context.Context) ManagedK8sRuntimeArrayOutput {
	return o
}

func (o ManagedK8sRuntimeArrayOutput) Index(i pulumi.IntInput) ManagedK8sRuntimeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ManagedK8sRuntime {
		return vs[0].([]*ManagedK8sRuntime)[vs[1].(int)]
	}).(ManagedK8sRuntimeOutput)
}

type ManagedK8sRuntimeMapOutput struct{ *pulumi.OutputState }

func (ManagedK8sRuntimeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ManagedK8sRuntime)(nil)).Elem()
}

func (o ManagedK8sRuntimeMapOutput) ToManagedK8sRuntimeMapOutput() ManagedK8sRuntimeMapOutput {
	return o
}

func (o ManagedK8sRuntimeMapOutput) ToManagedK8sRuntimeMapOutputWithContext(ctx context.Context) ManagedK8sRuntimeMapOutput {
	return o
}

func (o ManagedK8sRuntimeMapOutput) MapIndex(k pulumi.StringInput) ManagedK8sRuntimeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ManagedK8sRuntime {
		return vs[0].(map[string]*ManagedK8sRuntime)[vs[1].(string)]
	}).(ManagedK8sRuntimeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedK8sRuntimeInput)(nil)).Elem(), &ManagedK8sRuntime{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedK8sRuntimeArrayInput)(nil)).Elem(), ManagedK8sRuntimeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ManagedK8sRuntimeMapInput)(nil)).Elem(), ManagedK8sRuntimeMap{})
	pulumi.RegisterOutputType(ManagedK8sRuntimeOutput{})
	pulumi.RegisterOutputType(ManagedK8sRuntimeArrayOutput{})
	pulumi.RegisterOutputType(ManagedK8sRuntimeMapOutput{})
}
