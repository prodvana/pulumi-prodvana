// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package prodvana

import (
	"context"
	"reflect"

	"github.com/prodvana/pulumi-prodvana/sdk/go/prodvana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource allows you to manage a Prodvana Kubernetes [Runtime](https://docs.prodvana.io/docs/prodvana-concepts#runtime). You are responsible for managing the agent lifetime. Also see `ManagedK8sRuntime`.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/prodvana/pulumi-prodvana/sdk/go/prodvana"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := prodvana.NewK8sRuntime(ctx, "example", nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import prodvana:index/k8sRuntime:K8sRuntime example <runtime name>
//
// ```
type K8sRuntime struct {
	pulumi.CustomResourceState

	// API Token used for linking the Kubernetes Prodvana agent
	AgentApiToken pulumi.StringOutput `pulumi:"agentApiToken"`
	// Runtime name
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewK8sRuntime registers a new resource with the given unique name, arguments, and options.
func NewK8sRuntime(ctx *pulumi.Context,
	name string, args *K8sRuntimeArgs, opts ...pulumi.ResourceOption) (*K8sRuntime, error) {
	if args == nil {
		args = &K8sRuntimeArgs{}
	}

	secrets := pulumi.AdditionalSecretOutputs([]string{
		"agentApiToken",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource K8sRuntime
	err := ctx.RegisterResource("prodvana:index/k8sRuntime:K8sRuntime", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetK8sRuntime gets an existing K8sRuntime resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetK8sRuntime(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *K8sRuntimeState, opts ...pulumi.ResourceOption) (*K8sRuntime, error) {
	var resource K8sRuntime
	err := ctx.ReadResource("prodvana:index/k8sRuntime:K8sRuntime", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering K8sRuntime resources.
type k8sRuntimeState struct {
	// API Token used for linking the Kubernetes Prodvana agent
	AgentApiToken *string `pulumi:"agentApiToken"`
	// Runtime name
	Name *string `pulumi:"name"`
}

type K8sRuntimeState struct {
	// API Token used for linking the Kubernetes Prodvana agent
	AgentApiToken pulumi.StringPtrInput
	// Runtime name
	Name pulumi.StringPtrInput
}

func (K8sRuntimeState) ElementType() reflect.Type {
	return reflect.TypeOf((*k8sRuntimeState)(nil)).Elem()
}

type k8sRuntimeArgs struct {
	// Runtime name
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a K8sRuntime resource.
type K8sRuntimeArgs struct {
	// Runtime name
	Name pulumi.StringPtrInput
}

func (K8sRuntimeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*k8sRuntimeArgs)(nil)).Elem()
}

type K8sRuntimeInput interface {
	pulumi.Input

	ToK8sRuntimeOutput() K8sRuntimeOutput
	ToK8sRuntimeOutputWithContext(ctx context.Context) K8sRuntimeOutput
}

func (*K8sRuntime) ElementType() reflect.Type {
	return reflect.TypeOf((**K8sRuntime)(nil)).Elem()
}

func (i *K8sRuntime) ToK8sRuntimeOutput() K8sRuntimeOutput {
	return i.ToK8sRuntimeOutputWithContext(context.Background())
}

func (i *K8sRuntime) ToK8sRuntimeOutputWithContext(ctx context.Context) K8sRuntimeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sRuntimeOutput)
}

// K8sRuntimeArrayInput is an input type that accepts K8sRuntimeArray and K8sRuntimeArrayOutput values.
// You can construct a concrete instance of `K8sRuntimeArrayInput` via:
//
//	K8sRuntimeArray{ K8sRuntimeArgs{...} }
type K8sRuntimeArrayInput interface {
	pulumi.Input

	ToK8sRuntimeArrayOutput() K8sRuntimeArrayOutput
	ToK8sRuntimeArrayOutputWithContext(context.Context) K8sRuntimeArrayOutput
}

type K8sRuntimeArray []K8sRuntimeInput

func (K8sRuntimeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*K8sRuntime)(nil)).Elem()
}

func (i K8sRuntimeArray) ToK8sRuntimeArrayOutput() K8sRuntimeArrayOutput {
	return i.ToK8sRuntimeArrayOutputWithContext(context.Background())
}

func (i K8sRuntimeArray) ToK8sRuntimeArrayOutputWithContext(ctx context.Context) K8sRuntimeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sRuntimeArrayOutput)
}

// K8sRuntimeMapInput is an input type that accepts K8sRuntimeMap and K8sRuntimeMapOutput values.
// You can construct a concrete instance of `K8sRuntimeMapInput` via:
//
//	K8sRuntimeMap{ "key": K8sRuntimeArgs{...} }
type K8sRuntimeMapInput interface {
	pulumi.Input

	ToK8sRuntimeMapOutput() K8sRuntimeMapOutput
	ToK8sRuntimeMapOutputWithContext(context.Context) K8sRuntimeMapOutput
}

type K8sRuntimeMap map[string]K8sRuntimeInput

func (K8sRuntimeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*K8sRuntime)(nil)).Elem()
}

func (i K8sRuntimeMap) ToK8sRuntimeMapOutput() K8sRuntimeMapOutput {
	return i.ToK8sRuntimeMapOutputWithContext(context.Background())
}

func (i K8sRuntimeMap) ToK8sRuntimeMapOutputWithContext(ctx context.Context) K8sRuntimeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(K8sRuntimeMapOutput)
}

type K8sRuntimeOutput struct{ *pulumi.OutputState }

func (K8sRuntimeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**K8sRuntime)(nil)).Elem()
}

func (o K8sRuntimeOutput) ToK8sRuntimeOutput() K8sRuntimeOutput {
	return o
}

func (o K8sRuntimeOutput) ToK8sRuntimeOutputWithContext(ctx context.Context) K8sRuntimeOutput {
	return o
}

// API Token used for linking the Kubernetes Prodvana agent
func (o K8sRuntimeOutput) AgentApiToken() pulumi.StringOutput {
	return o.ApplyT(func(v *K8sRuntime) pulumi.StringOutput { return v.AgentApiToken }).(pulumi.StringOutput)
}

// Runtime name
func (o K8sRuntimeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *K8sRuntime) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type K8sRuntimeArrayOutput struct{ *pulumi.OutputState }

func (K8sRuntimeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*K8sRuntime)(nil)).Elem()
}

func (o K8sRuntimeArrayOutput) ToK8sRuntimeArrayOutput() K8sRuntimeArrayOutput {
	return o
}

func (o K8sRuntimeArrayOutput) ToK8sRuntimeArrayOutputWithContext(ctx context.Context) K8sRuntimeArrayOutput {
	return o
}

func (o K8sRuntimeArrayOutput) Index(i pulumi.IntInput) K8sRuntimeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *K8sRuntime {
		return vs[0].([]*K8sRuntime)[vs[1].(int)]
	}).(K8sRuntimeOutput)
}

type K8sRuntimeMapOutput struct{ *pulumi.OutputState }

func (K8sRuntimeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*K8sRuntime)(nil)).Elem()
}

func (o K8sRuntimeMapOutput) ToK8sRuntimeMapOutput() K8sRuntimeMapOutput {
	return o
}

func (o K8sRuntimeMapOutput) ToK8sRuntimeMapOutputWithContext(ctx context.Context) K8sRuntimeMapOutput {
	return o
}

func (o K8sRuntimeMapOutput) MapIndex(k pulumi.StringInput) K8sRuntimeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *K8sRuntime {
		return vs[0].(map[string]*K8sRuntime)[vs[1].(string)]
	}).(K8sRuntimeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*K8sRuntimeInput)(nil)).Elem(), &K8sRuntime{})
	pulumi.RegisterInputType(reflect.TypeOf((*K8sRuntimeArrayInput)(nil)).Elem(), K8sRuntimeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*K8sRuntimeMapInput)(nil)).Elem(), K8sRuntimeMap{})
	pulumi.RegisterOutputType(K8sRuntimeOutput{})
	pulumi.RegisterOutputType(K8sRuntimeArrayOutput{})
	pulumi.RegisterOutputType(K8sRuntimeMapOutput{})
}
