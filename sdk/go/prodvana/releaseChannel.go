// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package prodvana

import (
	"context"
	"reflect"

	"errors"
	"github.com/prodvana/pulumi-prodvana/sdk/go/prodvana/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource allows you to manage a Prodvana [Release Channel](https://docs.prodvana.io/docs/prodvana-concepts#release-channel).
//
// ## Import
//
// ```sh
//
//	$ pulumi import prodvana:index/releaseChannel:ReleaseChannel example <application name>/<release channel name>
//
// ```
type ReleaseChannel struct {
	pulumi.CustomResourceState

	// Name of the Application this Release Channel belongs to
	Application pulumi.StringOutput `pulumi:"application"`
	// Release Channel name
	Name pulumi.StringOutput `pulumi:"name"`
	// Release Channel policy applied to all services
	Policy ReleaseChannelPolicyPtrOutput `pulumi:"policy"`
	// Release Channel policy applied to all services
	Runtimes ReleaseChannelRuntimeArrayOutput `pulumi:"runtimes"`
	// Current application version
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewReleaseChannel registers a new resource with the given unique name, arguments, and options.
func NewReleaseChannel(ctx *pulumi.Context,
	name string, args *ReleaseChannelArgs, opts ...pulumi.ResourceOption) (*ReleaseChannel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Application == nil {
		return nil, errors.New("invalid value for required argument 'Application'")
	}
	if args.Runtimes == nil {
		return nil, errors.New("invalid value for required argument 'Runtimes'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ReleaseChannel
	err := ctx.RegisterResource("prodvana:index/releaseChannel:ReleaseChannel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetReleaseChannel gets an existing ReleaseChannel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetReleaseChannel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReleaseChannelState, opts ...pulumi.ResourceOption) (*ReleaseChannel, error) {
	var resource ReleaseChannel
	err := ctx.ReadResource("prodvana:index/releaseChannel:ReleaseChannel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ReleaseChannel resources.
type releaseChannelState struct {
	// Name of the Application this Release Channel belongs to
	Application *string `pulumi:"application"`
	// Release Channel name
	Name *string `pulumi:"name"`
	// Release Channel policy applied to all services
	Policy *ReleaseChannelPolicy `pulumi:"policy"`
	// Release Channel policy applied to all services
	Runtimes []ReleaseChannelRuntime `pulumi:"runtimes"`
	// Current application version
	Version *string `pulumi:"version"`
}

type ReleaseChannelState struct {
	// Name of the Application this Release Channel belongs to
	Application pulumi.StringPtrInput
	// Release Channel name
	Name pulumi.StringPtrInput
	// Release Channel policy applied to all services
	Policy ReleaseChannelPolicyPtrInput
	// Release Channel policy applied to all services
	Runtimes ReleaseChannelRuntimeArrayInput
	// Current application version
	Version pulumi.StringPtrInput
}

func (ReleaseChannelState) ElementType() reflect.Type {
	return reflect.TypeOf((*releaseChannelState)(nil)).Elem()
}

type releaseChannelArgs struct {
	// Name of the Application this Release Channel belongs to
	Application string `pulumi:"application"`
	// Release Channel name
	Name *string `pulumi:"name"`
	// Release Channel policy applied to all services
	Policy *ReleaseChannelPolicy `pulumi:"policy"`
	// Release Channel policy applied to all services
	Runtimes []ReleaseChannelRuntime `pulumi:"runtimes"`
}

// The set of arguments for constructing a ReleaseChannel resource.
type ReleaseChannelArgs struct {
	// Name of the Application this Release Channel belongs to
	Application pulumi.StringInput
	// Release Channel name
	Name pulumi.StringPtrInput
	// Release Channel policy applied to all services
	Policy ReleaseChannelPolicyPtrInput
	// Release Channel policy applied to all services
	Runtimes ReleaseChannelRuntimeArrayInput
}

func (ReleaseChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*releaseChannelArgs)(nil)).Elem()
}

type ReleaseChannelInput interface {
	pulumi.Input

	ToReleaseChannelOutput() ReleaseChannelOutput
	ToReleaseChannelOutputWithContext(ctx context.Context) ReleaseChannelOutput
}

func (*ReleaseChannel) ElementType() reflect.Type {
	return reflect.TypeOf((**ReleaseChannel)(nil)).Elem()
}

func (i *ReleaseChannel) ToReleaseChannelOutput() ReleaseChannelOutput {
	return i.ToReleaseChannelOutputWithContext(context.Background())
}

func (i *ReleaseChannel) ToReleaseChannelOutputWithContext(ctx context.Context) ReleaseChannelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReleaseChannelOutput)
}

// ReleaseChannelArrayInput is an input type that accepts ReleaseChannelArray and ReleaseChannelArrayOutput values.
// You can construct a concrete instance of `ReleaseChannelArrayInput` via:
//
//	ReleaseChannelArray{ ReleaseChannelArgs{...} }
type ReleaseChannelArrayInput interface {
	pulumi.Input

	ToReleaseChannelArrayOutput() ReleaseChannelArrayOutput
	ToReleaseChannelArrayOutputWithContext(context.Context) ReleaseChannelArrayOutput
}

type ReleaseChannelArray []ReleaseChannelInput

func (ReleaseChannelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReleaseChannel)(nil)).Elem()
}

func (i ReleaseChannelArray) ToReleaseChannelArrayOutput() ReleaseChannelArrayOutput {
	return i.ToReleaseChannelArrayOutputWithContext(context.Background())
}

func (i ReleaseChannelArray) ToReleaseChannelArrayOutputWithContext(ctx context.Context) ReleaseChannelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReleaseChannelArrayOutput)
}

// ReleaseChannelMapInput is an input type that accepts ReleaseChannelMap and ReleaseChannelMapOutput values.
// You can construct a concrete instance of `ReleaseChannelMapInput` via:
//
//	ReleaseChannelMap{ "key": ReleaseChannelArgs{...} }
type ReleaseChannelMapInput interface {
	pulumi.Input

	ToReleaseChannelMapOutput() ReleaseChannelMapOutput
	ToReleaseChannelMapOutputWithContext(context.Context) ReleaseChannelMapOutput
}

type ReleaseChannelMap map[string]ReleaseChannelInput

func (ReleaseChannelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReleaseChannel)(nil)).Elem()
}

func (i ReleaseChannelMap) ToReleaseChannelMapOutput() ReleaseChannelMapOutput {
	return i.ToReleaseChannelMapOutputWithContext(context.Background())
}

func (i ReleaseChannelMap) ToReleaseChannelMapOutputWithContext(ctx context.Context) ReleaseChannelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReleaseChannelMapOutput)
}

type ReleaseChannelOutput struct{ *pulumi.OutputState }

func (ReleaseChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ReleaseChannel)(nil)).Elem()
}

func (o ReleaseChannelOutput) ToReleaseChannelOutput() ReleaseChannelOutput {
	return o
}

func (o ReleaseChannelOutput) ToReleaseChannelOutputWithContext(ctx context.Context) ReleaseChannelOutput {
	return o
}

// Name of the Application this Release Channel belongs to
func (o ReleaseChannelOutput) Application() pulumi.StringOutput {
	return o.ApplyT(func(v *ReleaseChannel) pulumi.StringOutput { return v.Application }).(pulumi.StringOutput)
}

// Release Channel name
func (o ReleaseChannelOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ReleaseChannel) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Release Channel policy applied to all services
func (o ReleaseChannelOutput) Policy() ReleaseChannelPolicyPtrOutput {
	return o.ApplyT(func(v *ReleaseChannel) ReleaseChannelPolicyPtrOutput { return v.Policy }).(ReleaseChannelPolicyPtrOutput)
}

// Release Channel policy applied to all services
func (o ReleaseChannelOutput) Runtimes() ReleaseChannelRuntimeArrayOutput {
	return o.ApplyT(func(v *ReleaseChannel) ReleaseChannelRuntimeArrayOutput { return v.Runtimes }).(ReleaseChannelRuntimeArrayOutput)
}

// Current application version
func (o ReleaseChannelOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *ReleaseChannel) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type ReleaseChannelArrayOutput struct{ *pulumi.OutputState }

func (ReleaseChannelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ReleaseChannel)(nil)).Elem()
}

func (o ReleaseChannelArrayOutput) ToReleaseChannelArrayOutput() ReleaseChannelArrayOutput {
	return o
}

func (o ReleaseChannelArrayOutput) ToReleaseChannelArrayOutputWithContext(ctx context.Context) ReleaseChannelArrayOutput {
	return o
}

func (o ReleaseChannelArrayOutput) Index(i pulumi.IntInput) ReleaseChannelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ReleaseChannel {
		return vs[0].([]*ReleaseChannel)[vs[1].(int)]
	}).(ReleaseChannelOutput)
}

type ReleaseChannelMapOutput struct{ *pulumi.OutputState }

func (ReleaseChannelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ReleaseChannel)(nil)).Elem()
}

func (o ReleaseChannelMapOutput) ToReleaseChannelMapOutput() ReleaseChannelMapOutput {
	return o
}

func (o ReleaseChannelMapOutput) ToReleaseChannelMapOutputWithContext(ctx context.Context) ReleaseChannelMapOutput {
	return o
}

func (o ReleaseChannelMapOutput) MapIndex(k pulumi.StringInput) ReleaseChannelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ReleaseChannel {
		return vs[0].(map[string]*ReleaseChannel)[vs[1].(string)]
	}).(ReleaseChannelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReleaseChannelInput)(nil)).Elem(), &ReleaseChannel{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReleaseChannelArrayInput)(nil)).Elem(), ReleaseChannelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReleaseChannelMapInput)(nil)).Elem(), ReleaseChannelMap{})
	pulumi.RegisterOutputType(ReleaseChannelOutput{})
	pulumi.RegisterOutputType(ReleaseChannelArrayOutput{})
	pulumi.RegisterOutputType(ReleaseChannelMapOutput{})
}
