// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Prodvana
{
    /// <summary>
    /// This resource allows you to manage a Prodvana [Release Channel](https://docs.prodvana.io/docs/prodvana-concepts#release-channel).
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import prodvana:index/releaseChannel:ReleaseChannel example &lt;application name&gt;/&lt;release channel name&gt;
    /// ```
    /// </summary>
    [ProdvanaResourceType("prodvana:index/releaseChannel:ReleaseChannel")]
    public partial class ReleaseChannel : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Name of the Application this Release Channel belongs to
        /// </summary>
        [Output("application")]
        public Output<string> Application { get; private set; } = null!;

        /// <summary>
        /// Release Channel name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Release Channel policy applied to all services
        /// </summary>
        [Output("policy")]
        public Output<Outputs.ReleaseChannelPolicy?> Policy { get; private set; } = null!;

        /// <summary>
        /// Release Channel policy applied to all services
        /// </summary>
        [Output("runtimes")]
        public Output<ImmutableArray<Outputs.ReleaseChannelRuntime>> Runtimes { get; private set; } = null!;

        /// <summary>
        /// Current application version
        /// </summary>
        [Output("version")]
        public Output<string> Version { get; private set; } = null!;


        /// <summary>
        /// Create a ReleaseChannel resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ReleaseChannel(string name, ReleaseChannelArgs args, CustomResourceOptions? options = null)
            : base("prodvana:index/releaseChannel:ReleaseChannel", name, args ?? new ReleaseChannelArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ReleaseChannel(string name, Input<string> id, ReleaseChannelState? state = null, CustomResourceOptions? options = null)
            : base("prodvana:index/releaseChannel:ReleaseChannel", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ReleaseChannel resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ReleaseChannel Get(string name, Input<string> id, ReleaseChannelState? state = null, CustomResourceOptions? options = null)
        {
            return new ReleaseChannel(name, id, state, options);
        }
    }

    public sealed class ReleaseChannelArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the Application this Release Channel belongs to
        /// </summary>
        [Input("application", required: true)]
        public Input<string> Application { get; set; } = null!;

        /// <summary>
        /// Release Channel name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Release Channel policy applied to all services
        /// </summary>
        [Input("policy")]
        public Input<Inputs.ReleaseChannelPolicyArgs>? Policy { get; set; }

        [Input("runtimes", required: true)]
        private InputList<Inputs.ReleaseChannelRuntimeArgs>? _runtimes;

        /// <summary>
        /// Release Channel policy applied to all services
        /// </summary>
        public InputList<Inputs.ReleaseChannelRuntimeArgs> Runtimes
        {
            get => _runtimes ?? (_runtimes = new InputList<Inputs.ReleaseChannelRuntimeArgs>());
            set => _runtimes = value;
        }

        public ReleaseChannelArgs()
        {
        }
        public static new ReleaseChannelArgs Empty => new ReleaseChannelArgs();
    }

    public sealed class ReleaseChannelState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of the Application this Release Channel belongs to
        /// </summary>
        [Input("application")]
        public Input<string>? Application { get; set; }

        /// <summary>
        /// Release Channel name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Release Channel policy applied to all services
        /// </summary>
        [Input("policy")]
        public Input<Inputs.ReleaseChannelPolicyGetArgs>? Policy { get; set; }

        [Input("runtimes")]
        private InputList<Inputs.ReleaseChannelRuntimeGetArgs>? _runtimes;

        /// <summary>
        /// Release Channel policy applied to all services
        /// </summary>
        public InputList<Inputs.ReleaseChannelRuntimeGetArgs> Runtimes
        {
            get => _runtimes ?? (_runtimes = new InputList<Inputs.ReleaseChannelRuntimeGetArgs>());
            set => _runtimes = value;
        }

        /// <summary>
        /// Current application version
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        public ReleaseChannelState()
        {
        }
        public static new ReleaseChannelState Empty => new ReleaseChannelState();
    }
}
