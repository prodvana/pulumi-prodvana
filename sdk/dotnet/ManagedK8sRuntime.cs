// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Prodvana
{
    [ProdvanaResourceType("prodvana:index/managedK8sRuntime:ManagedK8sRuntime")]
    public partial class ManagedK8sRuntime : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Environment variables to pass to the agent. Useful for cases like passing proxy configuration to the agent if needed.
        /// </summary>
        [Output("agentEnv")]
        public Output<ImmutableDictionary<string, string>> AgentEnv { get; private set; } = null!;

        /// <summary>
        /// The namespace of the agent
        /// </summary>
        [Output("agentNamespace")]
        public Output<string> AgentNamespace { get; private set; } = null!;

        /// <summary>
        /// The runtime identifier of the agent
        /// </summary>
        [Output("agentRuntimeId")]
        public Output<string> AgentRuntimeId { get; private set; } = null!;

        /// <summary>
        /// PEM-encoded client certificate for TLS authentication.
        /// </summary>
        [Output("clientCertificate")]
        public Output<string> ClientCertificate { get; private set; } = null!;

        /// <summary>
        /// PEM-encoded client certificate key for TLS authentication.
        /// </summary>
        [Output("clientKey")]
        public Output<string> ClientKey { get; private set; } = null!;

        /// <summary>
        /// PEM-encoded root certificates bundle for TLS authentication.
        /// </summary>
        [Output("clusterCaCertificate")]
        public Output<string> ClusterCaCertificate { get; private set; } = null!;

        /// <summary>
        /// Context to use from the kube config file.
        /// </summary>
        [Output("configContext")]
        public Output<string> ConfigContext { get; private set; } = null!;

        /// <summary>
        /// Authentication info context of the kube config (name of the kubeconfig user, `--user` flag in `kubectl`).
        /// </summary>
        [Output("configContextAuthInfo")]
        public Output<string> ConfigContextAuthInfo { get; private set; } = null!;

        /// <summary>
        /// Cluster context of the kube config (name of the kubeconfig cluster, `--cluster` flag in `kubectl`).
        /// </summary>
        [Output("configContextCluster")]
        public Output<string> ConfigContextCluster { get; private set; } = null!;

        /// <summary>
        /// Path to the kube config file.
        /// </summary>
        [Output("configPath")]
        public Output<string> ConfigPath { get; private set; } = null!;

        /// <summary>
        /// A list of paths to kube config files.
        /// </summary>
        [Output("configPaths")]
        public Output<ImmutableArray<string>> ConfigPaths { get; private set; } = null!;

        /// <summary>
        /// Exec configuration for authentication to the Kubernetes cluster
        /// </summary>
        [Output("exec")]
        public Output<Outputs.ManagedK8sRuntimeExec?> Exec { get; private set; } = null!;

        /// <summary>
        /// The address of the Kubernetes cluster (scheme://hostname:port)
        /// </summary>
        [Output("host")]
        public Output<string> Host { get; private set; } = null!;

        /// <summary>
        /// Whether server should be accessed without verifying the TLS certificate
        /// </summary>
        [Output("insecure")]
        public Output<bool> Insecure { get; private set; } = null!;

        /// <summary>
        /// Runtime name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Password for basic authentication to the Kubernetes cluster
        /// </summary>
        [Output("password")]
        public Output<string> Password { get; private set; } = null!;

        /// <summary>
        /// Proxy URL to use when accessing the Kubernetes cluster
        /// </summary>
        [Output("proxyUrl")]
        public Output<string> ProxyUrl { get; private set; } = null!;

        /// <summary>
        /// How long to wait for the runtime linking to complete. A valid Go duration string, e.g. `10m` or `1h`. Defaults to `10m`
        /// </summary>
        [Output("timeout")]
        public Output<string> Timeout { get; private set; } = null!;

        /// <summary>
        /// Server name passed to the server for SNI and is used in the client to check server certificates against
        /// </summary>
        [Output("tlsServerName")]
        public Output<string> TlsServerName { get; private set; } = null!;

        /// <summary>
        /// Token to authenticate an service account
        /// </summary>
        [Output("token")]
        public Output<string> Token { get; private set; } = null!;

        /// <summary>
        /// Username for basic authentication to the Kubernetes cluster
        /// </summary>
        [Output("username")]
        public Output<string> Username { get; private set; } = null!;


        /// <summary>
        /// Create a ManagedK8sRuntime resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ManagedK8sRuntime(string name, ManagedK8sRuntimeArgs? args = null, CustomResourceOptions? options = null)
            : base("prodvana:index/managedK8sRuntime:ManagedK8sRuntime", name, args ?? new ManagedK8sRuntimeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ManagedK8sRuntime(string name, Input<string> id, ManagedK8sRuntimeState? state = null, CustomResourceOptions? options = null)
            : base("prodvana:index/managedK8sRuntime:ManagedK8sRuntime", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/prodvana",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ManagedK8sRuntime resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ManagedK8sRuntime Get(string name, Input<string> id, ManagedK8sRuntimeState? state = null, CustomResourceOptions? options = null)
        {
            return new ManagedK8sRuntime(name, id, state, options);
        }
    }

    public sealed class ManagedK8sRuntimeArgs : global::Pulumi.ResourceArgs
    {
        [Input("agentEnv")]
        private InputMap<string>? _agentEnv;

        /// <summary>
        /// Environment variables to pass to the agent. Useful for cases like passing proxy configuration to the agent if needed.
        /// </summary>
        public InputMap<string> AgentEnv
        {
            get => _agentEnv ?? (_agentEnv = new InputMap<string>());
            set => _agentEnv = value;
        }

        /// <summary>
        /// PEM-encoded client certificate for TLS authentication.
        /// </summary>
        [Input("clientCertificate")]
        public Input<string>? ClientCertificate { get; set; }

        /// <summary>
        /// PEM-encoded client certificate key for TLS authentication.
        /// </summary>
        [Input("clientKey")]
        public Input<string>? ClientKey { get; set; }

        /// <summary>
        /// PEM-encoded root certificates bundle for TLS authentication.
        /// </summary>
        [Input("clusterCaCertificate")]
        public Input<string>? ClusterCaCertificate { get; set; }

        /// <summary>
        /// Context to use from the kube config file.
        /// </summary>
        [Input("configContext")]
        public Input<string>? ConfigContext { get; set; }

        /// <summary>
        /// Authentication info context of the kube config (name of the kubeconfig user, `--user` flag in `kubectl`).
        /// </summary>
        [Input("configContextAuthInfo")]
        public Input<string>? ConfigContextAuthInfo { get; set; }

        /// <summary>
        /// Cluster context of the kube config (name of the kubeconfig cluster, `--cluster` flag in `kubectl`).
        /// </summary>
        [Input("configContextCluster")]
        public Input<string>? ConfigContextCluster { get; set; }

        /// <summary>
        /// Path to the kube config file.
        /// </summary>
        [Input("configPath")]
        public Input<string>? ConfigPath { get; set; }

        [Input("configPaths")]
        private InputList<string>? _configPaths;

        /// <summary>
        /// A list of paths to kube config files.
        /// </summary>
        public InputList<string> ConfigPaths
        {
            get => _configPaths ?? (_configPaths = new InputList<string>());
            set => _configPaths = value;
        }

        /// <summary>
        /// Exec configuration for authentication to the Kubernetes cluster
        /// </summary>
        [Input("exec")]
        public Input<Inputs.ManagedK8sRuntimeExecArgs>? Exec { get; set; }

        /// <summary>
        /// The address of the Kubernetes cluster (scheme://hostname:port)
        /// </summary>
        [Input("host")]
        public Input<string>? Host { get; set; }

        /// <summary>
        /// Whether server should be accessed without verifying the TLS certificate
        /// </summary>
        [Input("insecure")]
        public Input<bool>? Insecure { get; set; }

        /// <summary>
        /// Runtime name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Password for basic authentication to the Kubernetes cluster
        /// </summary>
        [Input("password")]
        public Input<string>? Password { get; set; }

        /// <summary>
        /// Proxy URL to use when accessing the Kubernetes cluster
        /// </summary>
        [Input("proxyUrl")]
        public Input<string>? ProxyUrl { get; set; }

        /// <summary>
        /// How long to wait for the runtime linking to complete. A valid Go duration string, e.g. `10m` or `1h`. Defaults to `10m`
        /// </summary>
        [Input("timeout")]
        public Input<string>? Timeout { get; set; }

        /// <summary>
        /// Server name passed to the server for SNI and is used in the client to check server certificates against
        /// </summary>
        [Input("tlsServerName")]
        public Input<string>? TlsServerName { get; set; }

        /// <summary>
        /// Token to authenticate an service account
        /// </summary>
        [Input("token")]
        public Input<string>? Token { get; set; }

        /// <summary>
        /// Username for basic authentication to the Kubernetes cluster
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public ManagedK8sRuntimeArgs()
        {
        }
        public static new ManagedK8sRuntimeArgs Empty => new ManagedK8sRuntimeArgs();
    }

    public sealed class ManagedK8sRuntimeState : global::Pulumi.ResourceArgs
    {
        [Input("agentEnv")]
        private InputMap<string>? _agentEnv;

        /// <summary>
        /// Environment variables to pass to the agent. Useful for cases like passing proxy configuration to the agent if needed.
        /// </summary>
        public InputMap<string> AgentEnv
        {
            get => _agentEnv ?? (_agentEnv = new InputMap<string>());
            set => _agentEnv = value;
        }

        /// <summary>
        /// The namespace of the agent
        /// </summary>
        [Input("agentNamespace")]
        public Input<string>? AgentNamespace { get; set; }

        /// <summary>
        /// The runtime identifier of the agent
        /// </summary>
        [Input("agentRuntimeId")]
        public Input<string>? AgentRuntimeId { get; set; }

        /// <summary>
        /// PEM-encoded client certificate for TLS authentication.
        /// </summary>
        [Input("clientCertificate")]
        public Input<string>? ClientCertificate { get; set; }

        /// <summary>
        /// PEM-encoded client certificate key for TLS authentication.
        /// </summary>
        [Input("clientKey")]
        public Input<string>? ClientKey { get; set; }

        /// <summary>
        /// PEM-encoded root certificates bundle for TLS authentication.
        /// </summary>
        [Input("clusterCaCertificate")]
        public Input<string>? ClusterCaCertificate { get; set; }

        /// <summary>
        /// Context to use from the kube config file.
        /// </summary>
        [Input("configContext")]
        public Input<string>? ConfigContext { get; set; }

        /// <summary>
        /// Authentication info context of the kube config (name of the kubeconfig user, `--user` flag in `kubectl`).
        /// </summary>
        [Input("configContextAuthInfo")]
        public Input<string>? ConfigContextAuthInfo { get; set; }

        /// <summary>
        /// Cluster context of the kube config (name of the kubeconfig cluster, `--cluster` flag in `kubectl`).
        /// </summary>
        [Input("configContextCluster")]
        public Input<string>? ConfigContextCluster { get; set; }

        /// <summary>
        /// Path to the kube config file.
        /// </summary>
        [Input("configPath")]
        public Input<string>? ConfigPath { get; set; }

        [Input("configPaths")]
        private InputList<string>? _configPaths;

        /// <summary>
        /// A list of paths to kube config files.
        /// </summary>
        public InputList<string> ConfigPaths
        {
            get => _configPaths ?? (_configPaths = new InputList<string>());
            set => _configPaths = value;
        }

        /// <summary>
        /// Exec configuration for authentication to the Kubernetes cluster
        /// </summary>
        [Input("exec")]
        public Input<Inputs.ManagedK8sRuntimeExecGetArgs>? Exec { get; set; }

        /// <summary>
        /// The address of the Kubernetes cluster (scheme://hostname:port)
        /// </summary>
        [Input("host")]
        public Input<string>? Host { get; set; }

        /// <summary>
        /// Whether server should be accessed without verifying the TLS certificate
        /// </summary>
        [Input("insecure")]
        public Input<bool>? Insecure { get; set; }

        /// <summary>
        /// Runtime name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Password for basic authentication to the Kubernetes cluster
        /// </summary>
        [Input("password")]
        public Input<string>? Password { get; set; }

        /// <summary>
        /// Proxy URL to use when accessing the Kubernetes cluster
        /// </summary>
        [Input("proxyUrl")]
        public Input<string>? ProxyUrl { get; set; }

        /// <summary>
        /// How long to wait for the runtime linking to complete. A valid Go duration string, e.g. `10m` or `1h`. Defaults to `10m`
        /// </summary>
        [Input("timeout")]
        public Input<string>? Timeout { get; set; }

        /// <summary>
        /// Server name passed to the server for SNI and is used in the client to check server certificates against
        /// </summary>
        [Input("tlsServerName")]
        public Input<string>? TlsServerName { get; set; }

        /// <summary>
        /// Token to authenticate an service account
        /// </summary>
        [Input("token")]
        public Input<string>? Token { get; set; }

        /// <summary>
        /// Username for basic authentication to the Kubernetes cluster
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public ManagedK8sRuntimeState()
        {
        }
        public static new ManagedK8sRuntimeState Empty => new ManagedK8sRuntimeState();
    }
}
