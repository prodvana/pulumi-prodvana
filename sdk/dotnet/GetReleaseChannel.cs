// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Prodvana
{
    public static class GetReleaseChannel
    {
        /// <summary>
        /// Prodvana Release Channel
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Prodvana = Pulumi.Prodvana;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Prodvana.GetReleaseChannel.Invoke(new()
        ///     {
        ///         Application = "my-app",
        ///         Name = "my-rc",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetReleaseChannelResult> InvokeAsync(GetReleaseChannelArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetReleaseChannelResult>("prodvana:index/getReleaseChannel:getReleaseChannel", args ?? new GetReleaseChannelArgs(), options.WithDefaults());

        /// <summary>
        /// Prodvana Release Channel
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Prodvana = Pulumi.Prodvana;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Prodvana.GetReleaseChannel.Invoke(new()
        ///     {
        ///         Application = "my-app",
        ///         Name = "my-rc",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetReleaseChannelResult> Invoke(GetReleaseChannelInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetReleaseChannelResult>("prodvana:index/getReleaseChannel:getReleaseChannel", args ?? new GetReleaseChannelInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetReleaseChannelArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the Application this Release Channel belongs to
        /// </summary>
        [Input("application", required: true)]
        public string Application { get; set; } = null!;

        [Input("constants")]
        private List<Inputs.GetReleaseChannelConstantArgs>? _constants;

        /// <summary>
        /// Constant values for this release channel
        /// </summary>
        public List<Inputs.GetReleaseChannelConstantArgs> Constants
        {
            get => _constants ?? (_constants = new List<Inputs.GetReleaseChannelConstantArgs>());
            set => _constants = value;
        }

        [Input("convergenceProtections")]
        private List<Inputs.GetReleaseChannelConvergenceProtectionArgs>? _convergenceProtections;

        /// <summary>
        /// Feature Coming Soon
        /// </summary>
        public List<Inputs.GetReleaseChannelConvergenceProtectionArgs> ConvergenceProtections
        {
            get => _convergenceProtections ?? (_convergenceProtections = new List<Inputs.GetReleaseChannelConvergenceProtectionArgs>());
            set => _convergenceProtections = value;
        }

        /// <summary>
        /// Disable all protections for this release channel
        /// </summary>
        [Input("disableAllProtections")]
        public bool? DisableAllProtections { get; set; }

        [Input("manualApprovalPreconditions")]
        private List<Inputs.GetReleaseChannelManualApprovalPreconditionArgs>? _manualApprovalPreconditions;

        /// <summary>
        /// Preconditions requiring manual approval before this release channel can be deployed
        /// </summary>
        public List<Inputs.GetReleaseChannelManualApprovalPreconditionArgs> ManualApprovalPreconditions
        {
            get => _manualApprovalPreconditions ?? (_manualApprovalPreconditions = new List<Inputs.GetReleaseChannelManualApprovalPreconditionArgs>());
            set => _manualApprovalPreconditions = value;
        }

        /// <summary>
        /// Release Channel name
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Release Channel policy applied to all services
        /// </summary>
        [Input("policy")]
        public Inputs.GetReleaseChannelPolicyArgs? Policy { get; set; }

        [Input("protections")]
        private List<Inputs.GetReleaseChannelProtectionArgs>? _protections;

        /// <summary>
        /// Protections applied this release channel
        /// </summary>
        public List<Inputs.GetReleaseChannelProtectionArgs> Protections
        {
            get => _protections ?? (_protections = new List<Inputs.GetReleaseChannelProtectionArgs>());
            set => _protections = value;
        }

        [Input("releaseChannelStablePreconditions")]
        private List<Inputs.GetReleaseChannelReleaseChannelStablePreconditionArgs>? _releaseChannelStablePreconditions;

        /// <summary>
        /// Preconditions requiring other release channels to be stable before this release channel can be deployed
        /// </summary>
        public List<Inputs.GetReleaseChannelReleaseChannelStablePreconditionArgs> ReleaseChannelStablePreconditions
        {
            get => _releaseChannelStablePreconditions ?? (_releaseChannelStablePreconditions = new List<Inputs.GetReleaseChannelReleaseChannelStablePreconditionArgs>());
            set => _releaseChannelStablePreconditions = value;
        }

        [Input("serviceInstanceProtections")]
        private List<Inputs.GetReleaseChannelServiceInstanceProtectionArgs>? _serviceInstanceProtections;

        /// <summary>
        /// Protections applied to service instances in this release channel
        /// </summary>
        public List<Inputs.GetReleaseChannelServiceInstanceProtectionArgs> ServiceInstanceProtections
        {
            get => _serviceInstanceProtections ?? (_serviceInstanceProtections = new List<Inputs.GetReleaseChannelServiceInstanceProtectionArgs>());
            set => _serviceInstanceProtections = value;
        }

        public GetReleaseChannelArgs()
        {
        }
        public static new GetReleaseChannelArgs Empty => new GetReleaseChannelArgs();
    }

    public sealed class GetReleaseChannelInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the Application this Release Channel belongs to
        /// </summary>
        [Input("application", required: true)]
        public Input<string> Application { get; set; } = null!;

        [Input("constants")]
        private InputList<Inputs.GetReleaseChannelConstantInputArgs>? _constants;

        /// <summary>
        /// Constant values for this release channel
        /// </summary>
        public InputList<Inputs.GetReleaseChannelConstantInputArgs> Constants
        {
            get => _constants ?? (_constants = new InputList<Inputs.GetReleaseChannelConstantInputArgs>());
            set => _constants = value;
        }

        [Input("convergenceProtections")]
        private InputList<Inputs.GetReleaseChannelConvergenceProtectionInputArgs>? _convergenceProtections;

        /// <summary>
        /// Feature Coming Soon
        /// </summary>
        public InputList<Inputs.GetReleaseChannelConvergenceProtectionInputArgs> ConvergenceProtections
        {
            get => _convergenceProtections ?? (_convergenceProtections = new InputList<Inputs.GetReleaseChannelConvergenceProtectionInputArgs>());
            set => _convergenceProtections = value;
        }

        /// <summary>
        /// Disable all protections for this release channel
        /// </summary>
        [Input("disableAllProtections")]
        public Input<bool>? DisableAllProtections { get; set; }

        [Input("manualApprovalPreconditions")]
        private InputList<Inputs.GetReleaseChannelManualApprovalPreconditionInputArgs>? _manualApprovalPreconditions;

        /// <summary>
        /// Preconditions requiring manual approval before this release channel can be deployed
        /// </summary>
        public InputList<Inputs.GetReleaseChannelManualApprovalPreconditionInputArgs> ManualApprovalPreconditions
        {
            get => _manualApprovalPreconditions ?? (_manualApprovalPreconditions = new InputList<Inputs.GetReleaseChannelManualApprovalPreconditionInputArgs>());
            set => _manualApprovalPreconditions = value;
        }

        /// <summary>
        /// Release Channel name
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Release Channel policy applied to all services
        /// </summary>
        [Input("policy")]
        public Input<Inputs.GetReleaseChannelPolicyInputArgs>? Policy { get; set; }

        [Input("protections")]
        private InputList<Inputs.GetReleaseChannelProtectionInputArgs>? _protections;

        /// <summary>
        /// Protections applied this release channel
        /// </summary>
        public InputList<Inputs.GetReleaseChannelProtectionInputArgs> Protections
        {
            get => _protections ?? (_protections = new InputList<Inputs.GetReleaseChannelProtectionInputArgs>());
            set => _protections = value;
        }

        [Input("releaseChannelStablePreconditions")]
        private InputList<Inputs.GetReleaseChannelReleaseChannelStablePreconditionInputArgs>? _releaseChannelStablePreconditions;

        /// <summary>
        /// Preconditions requiring other release channels to be stable before this release channel can be deployed
        /// </summary>
        public InputList<Inputs.GetReleaseChannelReleaseChannelStablePreconditionInputArgs> ReleaseChannelStablePreconditions
        {
            get => _releaseChannelStablePreconditions ?? (_releaseChannelStablePreconditions = new InputList<Inputs.GetReleaseChannelReleaseChannelStablePreconditionInputArgs>());
            set => _releaseChannelStablePreconditions = value;
        }

        [Input("serviceInstanceProtections")]
        private InputList<Inputs.GetReleaseChannelServiceInstanceProtectionInputArgs>? _serviceInstanceProtections;

        /// <summary>
        /// Protections applied to service instances in this release channel
        /// </summary>
        public InputList<Inputs.GetReleaseChannelServiceInstanceProtectionInputArgs> ServiceInstanceProtections
        {
            get => _serviceInstanceProtections ?? (_serviceInstanceProtections = new InputList<Inputs.GetReleaseChannelServiceInstanceProtectionInputArgs>());
            set => _serviceInstanceProtections = value;
        }

        public GetReleaseChannelInvokeArgs()
        {
        }
        public static new GetReleaseChannelInvokeArgs Empty => new GetReleaseChannelInvokeArgs();
    }


    [OutputType]
    public sealed class GetReleaseChannelResult
    {
        /// <summary>
        /// Name of the Application this Release Channel belongs to
        /// </summary>
        public readonly string Application;
        /// <summary>
        /// Constant values for this release channel
        /// </summary>
        public readonly ImmutableArray<Outputs.GetReleaseChannelConstantResult> Constants;
        /// <summary>
        /// Feature Coming Soon
        /// </summary>
        public readonly ImmutableArray<Outputs.GetReleaseChannelConvergenceProtectionResult> ConvergenceProtections;
        /// <summary>
        /// Disable all protections for this release channel
        /// </summary>
        public readonly bool? DisableAllProtections;
        /// <summary>
        /// Release channel identifier
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Preconditions requiring manual approval before this release channel can be deployed
        /// </summary>
        public readonly ImmutableArray<Outputs.GetReleaseChannelManualApprovalPreconditionResult> ManualApprovalPreconditions;
        /// <summary>
        /// Release Channel name
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Release Channel policy applied to all services
        /// </summary>
        public readonly Outputs.GetReleaseChannelPolicyResult Policy;
        /// <summary>
        /// Protections applied this release channel
        /// </summary>
        public readonly ImmutableArray<Outputs.GetReleaseChannelProtectionResult> Protections;
        /// <summary>
        /// Preconditions requiring other release channels to be stable before this release channel can be deployed
        /// </summary>
        public readonly ImmutableArray<Outputs.GetReleaseChannelReleaseChannelStablePreconditionResult> ReleaseChannelStablePreconditions;
        /// <summary>
        /// Release Channel policy applied to all services
        /// </summary>
        public readonly ImmutableArray<Outputs.GetReleaseChannelRuntimeResult> Runtimes;
        /// <summary>
        /// Protections applied to service instances in this release channel
        /// </summary>
        public readonly ImmutableArray<Outputs.GetReleaseChannelServiceInstanceProtectionResult> ServiceInstanceProtections;
        /// <summary>
        /// Current application version
        /// </summary>
        public readonly string Version;

        [OutputConstructor]
        private GetReleaseChannelResult(
            string application,

            ImmutableArray<Outputs.GetReleaseChannelConstantResult> constants,

            ImmutableArray<Outputs.GetReleaseChannelConvergenceProtectionResult> convergenceProtections,

            bool? disableAllProtections,

            string id,

            ImmutableArray<Outputs.GetReleaseChannelManualApprovalPreconditionResult> manualApprovalPreconditions,

            string name,

            Outputs.GetReleaseChannelPolicyResult policy,

            ImmutableArray<Outputs.GetReleaseChannelProtectionResult> protections,

            ImmutableArray<Outputs.GetReleaseChannelReleaseChannelStablePreconditionResult> releaseChannelStablePreconditions,

            ImmutableArray<Outputs.GetReleaseChannelRuntimeResult> runtimes,

            ImmutableArray<Outputs.GetReleaseChannelServiceInstanceProtectionResult> serviceInstanceProtections,

            string version)
        {
            Application = application;
            Constants = constants;
            ConvergenceProtections = convergenceProtections;
            DisableAllProtections = disableAllProtections;
            Id = id;
            ManualApprovalPreconditions = manualApprovalPreconditions;
            Name = name;
            Policy = policy;
            Protections = protections;
            ReleaseChannelStablePreconditions = releaseChannelStablePreconditions;
            Runtimes = runtimes;
            ServiceInstanceProtections = serviceInstanceProtections;
            Version = version;
        }
    }
}
