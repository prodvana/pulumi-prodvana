// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ApplicationArgs, ApplicationState } from "./application";
export type Application = import("./application").Application;
export const Application: typeof import("./application").Application = null as any;
utilities.lazyLoad(exports, ["Application"], () => require("./application"));

export { GetApplicationArgs, GetApplicationResult, GetApplicationOutputArgs } from "./getApplication";
export const getApplication: typeof import("./getApplication").getApplication = null as any;
export const getApplicationOutput: typeof import("./getApplication").getApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getApplication","getApplicationOutput"], () => require("./getApplication"));

export { GetK8sRuntimeArgs, GetK8sRuntimeResult, GetK8sRuntimeOutputArgs } from "./getK8sRuntime";
export const getK8sRuntime: typeof import("./getK8sRuntime").getK8sRuntime = null as any;
export const getK8sRuntimeOutput: typeof import("./getK8sRuntime").getK8sRuntimeOutput = null as any;
utilities.lazyLoad(exports, ["getK8sRuntime","getK8sRuntimeOutput"], () => require("./getK8sRuntime"));

export { GetReleaseChannelArgs, GetReleaseChannelResult, GetReleaseChannelOutputArgs } from "./getReleaseChannel";
export const getReleaseChannel: typeof import("./getReleaseChannel").getReleaseChannel = null as any;
export const getReleaseChannelOutput: typeof import("./getReleaseChannel").getReleaseChannelOutput = null as any;
utilities.lazyLoad(exports, ["getReleaseChannel","getReleaseChannelOutput"], () => require("./getReleaseChannel"));

export { K8sRuntimeArgs, K8sRuntimeState } from "./k8sRuntime";
export type K8sRuntime = import("./k8sRuntime").K8sRuntime;
export const K8sRuntime: typeof import("./k8sRuntime").K8sRuntime = null as any;
utilities.lazyLoad(exports, ["K8sRuntime"], () => require("./k8sRuntime"));

export { ManagedK8sRuntimeArgs, ManagedK8sRuntimeState } from "./managedK8sRuntime";
export type ManagedK8sRuntime = import("./managedK8sRuntime").ManagedK8sRuntime;
export const ManagedK8sRuntime: typeof import("./managedK8sRuntime").ManagedK8sRuntime = null as any;
utilities.lazyLoad(exports, ["ManagedK8sRuntime"], () => require("./managedK8sRuntime"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { ReleaseChannelArgs, ReleaseChannelState } from "./releaseChannel";
export type ReleaseChannel = import("./releaseChannel").ReleaseChannel;
export const ReleaseChannel: typeof import("./releaseChannel").ReleaseChannel = null as any;
utilities.lazyLoad(exports, ["ReleaseChannel"], () => require("./releaseChannel"));

export { RuntimeLinkArgs, RuntimeLinkState } from "./runtimeLink";
export type RuntimeLink = import("./runtimeLink").RuntimeLink;
export const RuntimeLink: typeof import("./runtimeLink").RuntimeLink = null as any;
utilities.lazyLoad(exports, ["RuntimeLink"], () => require("./runtimeLink"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "prodvana:index/application:Application":
                return new Application(name, <any>undefined, { urn })
            case "prodvana:index/k8sRuntime:K8sRuntime":
                return new K8sRuntime(name, <any>undefined, { urn })
            case "prodvana:index/managedK8sRuntime:ManagedK8sRuntime":
                return new ManagedK8sRuntime(name, <any>undefined, { urn })
            case "prodvana:index/releaseChannel:ReleaseChannel":
                return new ReleaseChannel(name, <any>undefined, { urn })
            case "prodvana:index/runtimeLink:RuntimeLink":
                return new RuntimeLink(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("prodvana", "index/application", _module)
pulumi.runtime.registerResourceModule("prodvana", "index/k8sRuntime", _module)
pulumi.runtime.registerResourceModule("prodvana", "index/managedK8sRuntime", _module)
pulumi.runtime.registerResourceModule("prodvana", "index/releaseChannel", _module)
pulumi.runtime.registerResourceModule("prodvana", "index/runtimeLink", _module)
pulumi.runtime.registerResourcePackage("prodvana", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:prodvana") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
