// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ManagedK8sRuntime extends pulumi.CustomResource {
    /**
     * Get an existing ManagedK8sRuntime resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ManagedK8sRuntimeState, opts?: pulumi.CustomResourceOptions): ManagedK8sRuntime {
        return new ManagedK8sRuntime(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'prodvana:index/managedK8sRuntime:ManagedK8sRuntime';

    /**
     * Returns true if the given object is an instance of ManagedK8sRuntime.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ManagedK8sRuntime {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ManagedK8sRuntime.__pulumiType;
    }

    /**
     * Environment variables to pass to the agent. Useful for cases like passing proxy configuration to the agent if needed.
     */
    public readonly agentEnv!: pulumi.Output<{[key: string]: string}>;
    /**
     * The namespace of the agent
     */
    public /*out*/ readonly agentNamespace!: pulumi.Output<string>;
    /**
     * The runtime identifier of the agent
     */
    public /*out*/ readonly agentRuntimeId!: pulumi.Output<string>;
    /**
     * PEM-encoded client certificate for TLS authentication.
     */
    public readonly clientCertificate!: pulumi.Output<string>;
    /**
     * PEM-encoded client certificate key for TLS authentication.
     */
    public readonly clientKey!: pulumi.Output<string>;
    /**
     * PEM-encoded root certificates bundle for TLS authentication.
     */
    public readonly clusterCaCertificate!: pulumi.Output<string>;
    /**
     * Context to use from the kube config file.
     */
    public readonly configContext!: pulumi.Output<string>;
    /**
     * Authentication info context of the kube config (name of the kubeconfig user, `--user` flag in `kubectl`).
     */
    public readonly configContextAuthInfo!: pulumi.Output<string>;
    /**
     * Cluster context of the kube config (name of the kubeconfig cluster, `--cluster` flag in `kubectl`).
     */
    public readonly configContextCluster!: pulumi.Output<string>;
    /**
     * Path to the kube config file.
     */
    public readonly configPath!: pulumi.Output<string>;
    /**
     * A list of paths to kube config files.
     */
    public readonly configPaths!: pulumi.Output<string[]>;
    /**
     * Exec configuration for authentication to the Kubernetes cluster
     */
    public readonly exec!: pulumi.Output<outputs.ManagedK8sRuntimeExec | undefined>;
    /**
     * The address of the Kubernetes cluster (scheme://hostname:port)
     */
    public readonly host!: pulumi.Output<string>;
    /**
     * Whether server should be accessed without verifying the TLS certificate
     */
    public readonly insecure!: pulumi.Output<boolean>;
    /**
     * List of labels to apply to the runtime
     */
    public readonly labels!: pulumi.Output<outputs.ManagedK8sRuntimeLabel[]>;
    /**
     * Runtime name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Password for basic authentication to the Kubernetes cluster
     */
    public readonly password!: pulumi.Output<string>;
    /**
     * Proxy URL to use when accessing the Kubernetes cluster
     */
    public readonly proxyUrl!: pulumi.Output<string>;
    /**
     * How long to wait for the runtime linking to complete. A valid Go duration string, e.g. `10m` or `1h`. Defaults to `10m`
     */
    public readonly timeout!: pulumi.Output<string>;
    /**
     * Server name passed to the server for SNI and is used in the client to check server certificates against
     */
    public readonly tlsServerName!: pulumi.Output<string>;
    /**
     * Token to authenticate an service account
     */
    public readonly token!: pulumi.Output<string>;
    /**
     * Username for basic authentication to the Kubernetes cluster
     */
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a ManagedK8sRuntime resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ManagedK8sRuntimeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ManagedK8sRuntimeArgs | ManagedK8sRuntimeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ManagedK8sRuntimeState | undefined;
            resourceInputs["agentEnv"] = state ? state.agentEnv : undefined;
            resourceInputs["agentNamespace"] = state ? state.agentNamespace : undefined;
            resourceInputs["agentRuntimeId"] = state ? state.agentRuntimeId : undefined;
            resourceInputs["clientCertificate"] = state ? state.clientCertificate : undefined;
            resourceInputs["clientKey"] = state ? state.clientKey : undefined;
            resourceInputs["clusterCaCertificate"] = state ? state.clusterCaCertificate : undefined;
            resourceInputs["configContext"] = state ? state.configContext : undefined;
            resourceInputs["configContextAuthInfo"] = state ? state.configContextAuthInfo : undefined;
            resourceInputs["configContextCluster"] = state ? state.configContextCluster : undefined;
            resourceInputs["configPath"] = state ? state.configPath : undefined;
            resourceInputs["configPaths"] = state ? state.configPaths : undefined;
            resourceInputs["exec"] = state ? state.exec : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["insecure"] = state ? state.insecure : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["proxyUrl"] = state ? state.proxyUrl : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["tlsServerName"] = state ? state.tlsServerName : undefined;
            resourceInputs["token"] = state ? state.token : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as ManagedK8sRuntimeArgs | undefined;
            resourceInputs["agentEnv"] = args ? args.agentEnv : undefined;
            resourceInputs["clientCertificate"] = args ? args.clientCertificate : undefined;
            resourceInputs["clientKey"] = args ? args.clientKey : undefined;
            resourceInputs["clusterCaCertificate"] = args ? args.clusterCaCertificate : undefined;
            resourceInputs["configContext"] = args ? args.configContext : undefined;
            resourceInputs["configContextAuthInfo"] = args ? args.configContextAuthInfo : undefined;
            resourceInputs["configContextCluster"] = args ? args.configContextCluster : undefined;
            resourceInputs["configPath"] = args ? args.configPath : undefined;
            resourceInputs["configPaths"] = args ? args.configPaths : undefined;
            resourceInputs["exec"] = args ? args.exec : undefined;
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["insecure"] = args ? args.insecure : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args ? args.password : undefined;
            resourceInputs["proxyUrl"] = args ? args.proxyUrl : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["tlsServerName"] = args ? args.tlsServerName : undefined;
            resourceInputs["token"] = args ? args.token : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["agentNamespace"] = undefined /*out*/;
            resourceInputs["agentRuntimeId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ManagedK8sRuntime.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ManagedK8sRuntime resources.
 */
export interface ManagedK8sRuntimeState {
    /**
     * Environment variables to pass to the agent. Useful for cases like passing proxy configuration to the agent if needed.
     */
    agentEnv?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The namespace of the agent
     */
    agentNamespace?: pulumi.Input<string>;
    /**
     * The runtime identifier of the agent
     */
    agentRuntimeId?: pulumi.Input<string>;
    /**
     * PEM-encoded client certificate for TLS authentication.
     */
    clientCertificate?: pulumi.Input<string>;
    /**
     * PEM-encoded client certificate key for TLS authentication.
     */
    clientKey?: pulumi.Input<string>;
    /**
     * PEM-encoded root certificates bundle for TLS authentication.
     */
    clusterCaCertificate?: pulumi.Input<string>;
    /**
     * Context to use from the kube config file.
     */
    configContext?: pulumi.Input<string>;
    /**
     * Authentication info context of the kube config (name of the kubeconfig user, `--user` flag in `kubectl`).
     */
    configContextAuthInfo?: pulumi.Input<string>;
    /**
     * Cluster context of the kube config (name of the kubeconfig cluster, `--cluster` flag in `kubectl`).
     */
    configContextCluster?: pulumi.Input<string>;
    /**
     * Path to the kube config file.
     */
    configPath?: pulumi.Input<string>;
    /**
     * A list of paths to kube config files.
     */
    configPaths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Exec configuration for authentication to the Kubernetes cluster
     */
    exec?: pulumi.Input<inputs.ManagedK8sRuntimeExec>;
    /**
     * The address of the Kubernetes cluster (scheme://hostname:port)
     */
    host?: pulumi.Input<string>;
    /**
     * Whether server should be accessed without verifying the TLS certificate
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * List of labels to apply to the runtime
     */
    labels?: pulumi.Input<pulumi.Input<inputs.ManagedK8sRuntimeLabel>[]>;
    /**
     * Runtime name
     */
    name?: pulumi.Input<string>;
    /**
     * Password for basic authentication to the Kubernetes cluster
     */
    password?: pulumi.Input<string>;
    /**
     * Proxy URL to use when accessing the Kubernetes cluster
     */
    proxyUrl?: pulumi.Input<string>;
    /**
     * How long to wait for the runtime linking to complete. A valid Go duration string, e.g. `10m` or `1h`. Defaults to `10m`
     */
    timeout?: pulumi.Input<string>;
    /**
     * Server name passed to the server for SNI and is used in the client to check server certificates against
     */
    tlsServerName?: pulumi.Input<string>;
    /**
     * Token to authenticate an service account
     */
    token?: pulumi.Input<string>;
    /**
     * Username for basic authentication to the Kubernetes cluster
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ManagedK8sRuntime resource.
 */
export interface ManagedK8sRuntimeArgs {
    /**
     * Environment variables to pass to the agent. Useful for cases like passing proxy configuration to the agent if needed.
     */
    agentEnv?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * PEM-encoded client certificate for TLS authentication.
     */
    clientCertificate?: pulumi.Input<string>;
    /**
     * PEM-encoded client certificate key for TLS authentication.
     */
    clientKey?: pulumi.Input<string>;
    /**
     * PEM-encoded root certificates bundle for TLS authentication.
     */
    clusterCaCertificate?: pulumi.Input<string>;
    /**
     * Context to use from the kube config file.
     */
    configContext?: pulumi.Input<string>;
    /**
     * Authentication info context of the kube config (name of the kubeconfig user, `--user` flag in `kubectl`).
     */
    configContextAuthInfo?: pulumi.Input<string>;
    /**
     * Cluster context of the kube config (name of the kubeconfig cluster, `--cluster` flag in `kubectl`).
     */
    configContextCluster?: pulumi.Input<string>;
    /**
     * Path to the kube config file.
     */
    configPath?: pulumi.Input<string>;
    /**
     * A list of paths to kube config files.
     */
    configPaths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Exec configuration for authentication to the Kubernetes cluster
     */
    exec?: pulumi.Input<inputs.ManagedK8sRuntimeExec>;
    /**
     * The address of the Kubernetes cluster (scheme://hostname:port)
     */
    host?: pulumi.Input<string>;
    /**
     * Whether server should be accessed without verifying the TLS certificate
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * List of labels to apply to the runtime
     */
    labels?: pulumi.Input<pulumi.Input<inputs.ManagedK8sRuntimeLabel>[]>;
    /**
     * Runtime name
     */
    name?: pulumi.Input<string>;
    /**
     * Password for basic authentication to the Kubernetes cluster
     */
    password?: pulumi.Input<string>;
    /**
     * Proxy URL to use when accessing the Kubernetes cluster
     */
    proxyUrl?: pulumi.Input<string>;
    /**
     * How long to wait for the runtime linking to complete. A valid Go duration string, e.g. `10m` or `1h`. Defaults to `10m`
     */
    timeout?: pulumi.Input<string>;
    /**
     * Server name passed to the server for SNI and is used in the client to check server certificates against
     */
    tlsServerName?: pulumi.Input<string>;
    /**
     * Token to authenticate an service account
     */
    token?: pulumi.Input<string>;
    /**
     * Username for basic authentication to the Kubernetes cluster
     */
    username?: pulumi.Input<string>;
}
