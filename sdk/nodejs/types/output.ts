// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface GetK8sRuntimeLabel {
    /**
     * Label name
     */
    label: string;
    /**
     * Label value
     */
    value: string;
}

export interface GetReleaseChannelConstant {
    /**
     * name of the constant
     */
    name: string;
    /**
     * string value of the constant
     */
    stringValue: string;
}

export interface GetReleaseChannelConvergenceProtection {
    /**
     * deployment lifecycle options
     */
    deployment?: outputs.GetReleaseChannelConvergenceProtectionDeployment;
    /**
     * name of the protection
     */
    name: string;
    /**
     * post-approval lifecycle options
     */
    postApproval?: outputs.GetReleaseChannelConvergenceProtectionPostApproval;
    /**
     * post-deployment lifecycle options
     */
    postDeployment?: outputs.GetReleaseChannelConvergenceProtectionPostDeployment;
    /**
     * pre-approval lifecycle options
     */
    preApproval?: outputs.GetReleaseChannelConvergenceProtectionPreApproval;
    /**
     * reference to a protection stored in Prodvana
     */
    ref: outputs.GetReleaseChannelConvergenceProtectionRef;
}

export interface GetReleaseChannelConvergenceProtectionDeployment {
    /**
     * whether to enable deployment lifecycle options
     */
    enabled: boolean;
}

export interface GetReleaseChannelConvergenceProtectionPostApproval {
    /**
     * whether to enable deployment lifecycle options
     */
    enabled: boolean;
}

export interface GetReleaseChannelConvergenceProtectionPostDeployment {
    /**
     * how long to keep checking. A valid Go duration string, e.g. `10m` or `1h`. Defaults to `10m`
     */
    checkDuration?: string;
    /**
     * delay between the deployment completing and when this protection starts checking. A valid Go duration string, e.g. `10m` or `1h`. Defaults to `10m`
     */
    delayCheckDuration?: string;
    /**
     * whether to enable deployment lifecycle options
     */
    enabled: boolean;
}

export interface GetReleaseChannelConvergenceProtectionPreApproval {
    /**
     * whether to enable deployment lifecycle options
     */
    enabled: boolean;
}

export interface GetReleaseChannelConvergenceProtectionRef {
    /**
     * name of the constant
     */
    name: string;
    /**
     * parameters to pass to the protection
     */
    parameters?: outputs.GetReleaseChannelConvergenceProtectionRefParameter[];
}

export interface GetReleaseChannelConvergenceProtectionRefParameter {
    /**
     * parameter docker image tag value, only one of (string*value, int*value, docker*image*tag*value, secret*value) can be set
     */
    dockerImageTagValue?: string;
    /**
     * parameter int value, only one of (string*value, int*value, docker*image*tag*value, secret*value) can be set
     */
    intValue?: number;
    /**
     * name of the constant
     */
    name: string;
    /**
     * parameter secret value, only one of (string*value, int*value, docker*image*tag*value, secret*value) can be set
     */
    secretValue?: outputs.GetReleaseChannelConvergenceProtectionRefParameterSecretValue;
    /**
     * string value of the constant
     */
    stringValue?: string;
}

export interface GetReleaseChannelConvergenceProtectionRefParameterSecretValue {
    /**
     * Name of the secret.
     */
    key: string;
    /**
     * Version of the secret
     */
    version: string;
}

export interface GetReleaseChannelManualApprovalPrecondition {
    /**
     * description of the manual approval
     */
    description?: string;
    /**
     * whether to require manual approval for every action, or just the first
     */
    everyAction?: boolean;
    /**
     * name of the manual approval
     */
    name: string;
}

export interface GetReleaseChannelPolicy {
    /**
     * default environment variables for services in this Release Channel
     */
    defaultEnv: {[key: string]: outputs.GetReleaseChannelPolicyDefaultEnv};
}

export interface GetReleaseChannelPolicyDefaultEnv {
    /**
     * Reference to a secret value stored in Kubernetes.
     */
    kubernetesSecret?: outputs.GetReleaseChannelPolicyDefaultEnvKubernetesSecret;
    /**
     * Reference to a secret value stored in Prodvana.
     */
    secret?: outputs.GetReleaseChannelPolicyDefaultEnvSecret;
    /**
     * Non-sensitive environment variable value
     */
    value?: string;
}

export interface GetReleaseChannelPolicyDefaultEnvKubernetesSecret {
    /**
     * Name of the secret.
     */
    key?: string;
    /**
     * Name of the secret object
     */
    secretName?: string;
}

export interface GetReleaseChannelPolicyDefaultEnvSecret {
    /**
     * Name of the secret.
     */
    key?: string;
    /**
     * Version of the secret
     */
    version?: string;
}

export interface GetReleaseChannelProtection {
    /**
     * deployment lifecycle options
     */
    deployment?: outputs.GetReleaseChannelProtectionDeployment;
    /**
     * name of the protection
     */
    name: string;
    /**
     * post-approval lifecycle options
     */
    postApproval?: outputs.GetReleaseChannelProtectionPostApproval;
    /**
     * post-deployment lifecycle options
     */
    postDeployment?: outputs.GetReleaseChannelProtectionPostDeployment;
    /**
     * pre-approval lifecycle options
     */
    preApproval?: outputs.GetReleaseChannelProtectionPreApproval;
    /**
     * reference to a protection stored in Prodvana
     */
    ref: outputs.GetReleaseChannelProtectionRef;
}

export interface GetReleaseChannelProtectionDeployment {
    /**
     * whether to enable deployment lifecycle options
     */
    enabled: boolean;
}

export interface GetReleaseChannelProtectionPostApproval {
    /**
     * whether to enable deployment lifecycle options
     */
    enabled: boolean;
}

export interface GetReleaseChannelProtectionPostDeployment {
    /**
     * how long to keep checking. A valid Go duration string, e.g. `10m` or `1h`. Defaults to `10m`
     */
    checkDuration?: string;
    /**
     * delay between the deployment completing and when this protection starts checking. A valid Go duration string, e.g. `10m` or `1h`. Defaults to `10m`
     */
    delayCheckDuration?: string;
    /**
     * whether to enable deployment lifecycle options
     */
    enabled: boolean;
}

export interface GetReleaseChannelProtectionPreApproval {
    /**
     * whether to enable deployment lifecycle options
     */
    enabled: boolean;
}

export interface GetReleaseChannelProtectionRef {
    /**
     * name of the constant
     */
    name: string;
    /**
     * parameters to pass to the protection
     */
    parameters?: outputs.GetReleaseChannelProtectionRefParameter[];
}

export interface GetReleaseChannelProtectionRefParameter {
    /**
     * parameter docker image tag value, only one of (string*value, int*value, docker*image*tag*value, secret*value) can be set
     */
    dockerImageTagValue?: string;
    /**
     * parameter int value, only one of (string*value, int*value, docker*image*tag*value, secret*value) can be set
     */
    intValue?: number;
    /**
     * name of the constant
     */
    name: string;
    /**
     * parameter secret value, only one of (string*value, int*value, docker*image*tag*value, secret*value) can be set
     */
    secretValue?: outputs.GetReleaseChannelProtectionRefParameterSecretValue;
    /**
     * string value of the constant
     */
    stringValue?: string;
}

export interface GetReleaseChannelProtectionRefParameterSecretValue {
    /**
     * Name of the secret.
     */
    key: string;
    /**
     * Version of the secret
     */
    version: string;
}

export interface GetReleaseChannelReleaseChannelStablePrecondition {
    /**
     * name of a release channel that must be in a stable deployment state
     */
    releaseChannel: string;
}

export interface GetReleaseChannelRuntime {
    /**
     * ECS prefix
     */
    ecsPrefix: string;
    /**
     * Kubernetes namespace
     */
    k8sNamespace: string;
    /**
     * optional identifier for this runtime connection within this release channel
     */
    name: string;
    /**
     * name of the a runtime
     */
    runtime?: string;
    /**
     * type of the runtime connection, one of (AWS*ECS, EXTENSION, GOOGLE*CLOUD*RUN, LONG*LIVED*COMPUTE, UNKNOWN*CONNECTION)
     */
    type: string;
}

export interface GetReleaseChannelServiceInstanceProtection {
    /**
     * deployment lifecycle options
     */
    deployment?: outputs.GetReleaseChannelServiceInstanceProtectionDeployment;
    /**
     * name of the protection
     */
    name: string;
    /**
     * post-approval lifecycle options
     */
    postApproval?: outputs.GetReleaseChannelServiceInstanceProtectionPostApproval;
    /**
     * post-deployment lifecycle options
     */
    postDeployment?: outputs.GetReleaseChannelServiceInstanceProtectionPostDeployment;
    /**
     * pre-approval lifecycle options
     */
    preApproval?: outputs.GetReleaseChannelServiceInstanceProtectionPreApproval;
    /**
     * reference to a protection stored in Prodvana
     */
    ref: outputs.GetReleaseChannelServiceInstanceProtectionRef;
}

export interface GetReleaseChannelServiceInstanceProtectionDeployment {
    /**
     * whether to enable deployment lifecycle options
     */
    enabled: boolean;
}

export interface GetReleaseChannelServiceInstanceProtectionPostApproval {
    /**
     * whether to enable deployment lifecycle options
     */
    enabled: boolean;
}

export interface GetReleaseChannelServiceInstanceProtectionPostDeployment {
    /**
     * how long to keep checking. A valid Go duration string, e.g. `10m` or `1h`. Defaults to `10m`
     */
    checkDuration?: string;
    /**
     * delay between the deployment completing and when this protection starts checking. A valid Go duration string, e.g. `10m` or `1h`. Defaults to `10m`
     */
    delayCheckDuration?: string;
    /**
     * whether to enable deployment lifecycle options
     */
    enabled: boolean;
}

export interface GetReleaseChannelServiceInstanceProtectionPreApproval {
    /**
     * whether to enable deployment lifecycle options
     */
    enabled: boolean;
}

export interface GetReleaseChannelServiceInstanceProtectionRef {
    /**
     * name of the constant
     */
    name: string;
    /**
     * parameters to pass to the protection
     */
    parameters?: outputs.GetReleaseChannelServiceInstanceProtectionRefParameter[];
}

export interface GetReleaseChannelServiceInstanceProtectionRefParameter {
    /**
     * parameter docker image tag value, only one of (string*value, int*value, docker*image*tag*value, secret*value) can be set
     */
    dockerImageTagValue?: string;
    /**
     * parameter int value, only one of (string*value, int*value, docker*image*tag*value, secret*value) can be set
     */
    intValue?: number;
    /**
     * name of the constant
     */
    name: string;
    /**
     * parameter secret value, only one of (string*value, int*value, docker*image*tag*value, secret*value) can be set
     */
    secretValue?: outputs.GetReleaseChannelServiceInstanceProtectionRefParameterSecretValue;
    /**
     * string value of the constant
     */
    stringValue?: string;
}

export interface GetReleaseChannelServiceInstanceProtectionRefParameterSecretValue {
    /**
     * Name of the secret.
     */
    key: string;
    /**
     * Version of the secret
     */
    version: string;
}

export interface GetReleaseChannelSharedManualApprovalPrecondition {
    /**
     * name of the manual approval
     */
    name: string;
}

export interface K8sRuntimeLabel {
    /**
     * Label name
     */
    label: string;
    /**
     * Label value
     */
    value: string;
}

export interface ManagedK8sRuntimeExec {
    /**
     * API version of the exec credential plugin
     */
    apiVersion: string;
    /**
     * Arguments to pass when executing the command
     */
    args?: string[];
    /**
     * Command to execute
     */
    command: string;
    /**
     * Environment variables to set when executing the command
     */
    env?: {[key: string]: string};
}

export interface ManagedK8sRuntimeLabel {
    /**
     * Label name
     */
    label: string;
    /**
     * Label value
     */
    value: string;
}

export interface ReleaseChannelConstant {
    /**
     * name of the constant
     */
    name: string;
    /**
     * string value of the constant
     */
    stringValue: string;
}

export interface ReleaseChannelConvergenceProtection {
    /**
     * deployment lifecycle options
     */
    deployment?: outputs.ReleaseChannelConvergenceProtectionDeployment;
    /**
     * name of the protection
     */
    name: string;
    /**
     * post-approval lifecycle options
     */
    postApproval?: outputs.ReleaseChannelConvergenceProtectionPostApproval;
    /**
     * post-deployment lifecycle options
     */
    postDeployment?: outputs.ReleaseChannelConvergenceProtectionPostDeployment;
    /**
     * pre-approval lifecycle options
     */
    preApproval?: outputs.ReleaseChannelConvergenceProtectionPreApproval;
    /**
     * reference to a protection stored in Prodvana
     */
    ref: outputs.ReleaseChannelConvergenceProtectionRef;
}

export interface ReleaseChannelConvergenceProtectionDeployment {
    /**
     * whether to enable deployment lifecycle options
     */
    enabled: boolean;
}

export interface ReleaseChannelConvergenceProtectionPostApproval {
    /**
     * whether to enable deployment lifecycle options
     */
    enabled: boolean;
}

export interface ReleaseChannelConvergenceProtectionPostDeployment {
    /**
     * how long to keep checking. A valid Go duration string, e.g. `10m` or `1h`. Defaults to `10m`
     */
    checkDuration?: string;
    /**
     * delay between the deployment completing and when this protection starts checking. A valid Go duration string, e.g. `10m` or `1h`. Defaults to `10m`
     */
    delayCheckDuration?: string;
    /**
     * whether to enable deployment lifecycle options
     */
    enabled: boolean;
}

export interface ReleaseChannelConvergenceProtectionPreApproval {
    /**
     * whether to enable deployment lifecycle options
     */
    enabled: boolean;
}

export interface ReleaseChannelConvergenceProtectionRef {
    /**
     * name of the constant
     */
    name: string;
    /**
     * parameters to pass to the protection
     */
    parameters?: outputs.ReleaseChannelConvergenceProtectionRefParameter[];
}

export interface ReleaseChannelConvergenceProtectionRefParameter {
    /**
     * parameter docker image tag value, only one of (string*value, int*value, docker*image*tag*value, secret*value) can be set
     */
    dockerImageTagValue?: string;
    /**
     * parameter int value, only one of (string*value, int*value, docker*image*tag*value, secret*value) can be set
     */
    intValue?: number;
    /**
     * name of the constant
     */
    name: string;
    /**
     * parameter secret value, only one of (string*value, int*value, docker*image*tag*value, secret*value) can be set
     */
    secretValue?: outputs.ReleaseChannelConvergenceProtectionRefParameterSecretValue;
    /**
     * string value of the constant
     */
    stringValue?: string;
}

export interface ReleaseChannelConvergenceProtectionRefParameterSecretValue {
    /**
     * Name of the secret.
     */
    key: string;
    /**
     * Version of the secret
     */
    version: string;
}

export interface ReleaseChannelManualApprovalPrecondition {
    /**
     * description of the manual approval
     */
    description: string;
    everyAction: boolean;
    /**
     * name of the manual approval
     */
    name: string;
}

export interface ReleaseChannelPolicy {
    /**
     * default environment variables for services in this Release Channel
     */
    defaultEnv?: {[key: string]: outputs.ReleaseChannelPolicyDefaultEnv};
}

export interface ReleaseChannelPolicyDefaultEnv {
    /**
     * Reference to a secret value stored in Kubernetes.
     */
    kubernetesSecret?: outputs.ReleaseChannelPolicyDefaultEnvKubernetesSecret;
    /**
     * Reference to a secret value stored in Prodvana.
     */
    secret?: outputs.ReleaseChannelPolicyDefaultEnvSecret;
    /**
     * Non-sensitive environment variable value
     */
    value?: string;
}

export interface ReleaseChannelPolicyDefaultEnvKubernetesSecret {
    /**
     * Name of the secret.
     */
    key?: string;
    /**
     * Name of the secret object
     */
    secretName?: string;
}

export interface ReleaseChannelPolicyDefaultEnvSecret {
    /**
     * Name of the secret.
     */
    key?: string;
    /**
     * Version of the secret
     */
    version?: string;
}

export interface ReleaseChannelProtection {
    /**
     * deployment lifecycle options
     */
    deployment?: outputs.ReleaseChannelProtectionDeployment;
    /**
     * name of the protection
     */
    name: string;
    /**
     * post-approval lifecycle options
     */
    postApproval?: outputs.ReleaseChannelProtectionPostApproval;
    /**
     * post-deployment lifecycle options
     */
    postDeployment?: outputs.ReleaseChannelProtectionPostDeployment;
    /**
     * pre-approval lifecycle options
     */
    preApproval?: outputs.ReleaseChannelProtectionPreApproval;
    /**
     * reference to a protection stored in Prodvana
     */
    ref: outputs.ReleaseChannelProtectionRef;
}

export interface ReleaseChannelProtectionDeployment {
    /**
     * whether to enable deployment lifecycle options
     */
    enabled: boolean;
}

export interface ReleaseChannelProtectionPostApproval {
    /**
     * whether to enable deployment lifecycle options
     */
    enabled: boolean;
}

export interface ReleaseChannelProtectionPostDeployment {
    /**
     * how long to keep checking. A valid Go duration string, e.g. `10m` or `1h`. Defaults to `10m`
     */
    checkDuration?: string;
    /**
     * delay between the deployment completing and when this protection starts checking. A valid Go duration string, e.g. `10m` or `1h`. Defaults to `10m`
     */
    delayCheckDuration?: string;
    /**
     * whether to enable deployment lifecycle options
     */
    enabled: boolean;
}

export interface ReleaseChannelProtectionPreApproval {
    /**
     * whether to enable deployment lifecycle options
     */
    enabled: boolean;
}

export interface ReleaseChannelProtectionRef {
    /**
     * name of the constant
     */
    name: string;
    /**
     * parameters to pass to the protection
     */
    parameters?: outputs.ReleaseChannelProtectionRefParameter[];
}

export interface ReleaseChannelProtectionRefParameter {
    /**
     * parameter docker image tag value, only one of (string*value, int*value, docker*image*tag*value, secret*value) can be set
     */
    dockerImageTagValue?: string;
    /**
     * parameter int value, only one of (string*value, int*value, docker*image*tag*value, secret*value) can be set
     */
    intValue?: number;
    /**
     * name of the constant
     */
    name: string;
    /**
     * parameter secret value, only one of (string*value, int*value, docker*image*tag*value, secret*value) can be set
     */
    secretValue?: outputs.ReleaseChannelProtectionRefParameterSecretValue;
    /**
     * string value of the constant
     */
    stringValue?: string;
}

export interface ReleaseChannelProtectionRefParameterSecretValue {
    /**
     * Name of the secret.
     */
    key: string;
    /**
     * Version of the secret
     */
    version: string;
}

export interface ReleaseChannelReleaseChannelStablePrecondition {
    /**
     * name of a release channel that must be in a stable deployment state
     */
    releaseChannel: string;
}

export interface ReleaseChannelRuntime {
    /**
     * Prefix used when naming ECS resources. Can only be set on an ECS Runtime.
     */
    ecsPrefix: string;
    /**
     * Optionally set a custom namespace. If not set, Prodvana will create and manage the namespace. If set, the namespace *must* already exist and Prodvana will not try to create or delete it. Can only be set on a Kubernetes Runtime.
     */
    k8sNamespace: string;
    /**
     * optional identifier for this runtime connection within this release channel
     */
    name: string;
    /**
     * name of the a runtime
     */
    runtime?: string;
    /**
     * type of the runtime connection, one of (AWS*ECS, EXTENSION, GOOGLE*CLOUD*RUN, LONG*LIVED*COMPUTE, UNKNOWN*CONNECTION)
     */
    type: string;
}

export interface ReleaseChannelServiceInstanceProtection {
    /**
     * deployment lifecycle options
     */
    deployment?: outputs.ReleaseChannelServiceInstanceProtectionDeployment;
    /**
     * name of the protection
     */
    name: string;
    /**
     * post-approval lifecycle options
     */
    postApproval?: outputs.ReleaseChannelServiceInstanceProtectionPostApproval;
    /**
     * post-deployment lifecycle options
     */
    postDeployment?: outputs.ReleaseChannelServiceInstanceProtectionPostDeployment;
    /**
     * pre-approval lifecycle options
     */
    preApproval?: outputs.ReleaseChannelServiceInstanceProtectionPreApproval;
    /**
     * reference to a protection stored in Prodvana
     */
    ref: outputs.ReleaseChannelServiceInstanceProtectionRef;
}

export interface ReleaseChannelServiceInstanceProtectionDeployment {
    /**
     * whether to enable deployment lifecycle options
     */
    enabled: boolean;
}

export interface ReleaseChannelServiceInstanceProtectionPostApproval {
    /**
     * whether to enable deployment lifecycle options
     */
    enabled: boolean;
}

export interface ReleaseChannelServiceInstanceProtectionPostDeployment {
    /**
     * how long to keep checking. A valid Go duration string, e.g. `10m` or `1h`. Defaults to `10m`
     */
    checkDuration?: string;
    /**
     * delay between the deployment completing and when this protection starts checking. A valid Go duration string, e.g. `10m` or `1h`. Defaults to `10m`
     */
    delayCheckDuration?: string;
    /**
     * whether to enable deployment lifecycle options
     */
    enabled: boolean;
}

export interface ReleaseChannelServiceInstanceProtectionPreApproval {
    /**
     * whether to enable deployment lifecycle options
     */
    enabled: boolean;
}

export interface ReleaseChannelServiceInstanceProtectionRef {
    /**
     * name of the constant
     */
    name: string;
    /**
     * parameters to pass to the protection
     */
    parameters?: outputs.ReleaseChannelServiceInstanceProtectionRefParameter[];
}

export interface ReleaseChannelServiceInstanceProtectionRefParameter {
    /**
     * parameter docker image tag value, only one of (string*value, int*value, docker*image*tag*value, secret*value) can be set
     */
    dockerImageTagValue?: string;
    /**
     * parameter int value, only one of (string*value, int*value, docker*image*tag*value, secret*value) can be set
     */
    intValue?: number;
    /**
     * name of the constant
     */
    name: string;
    /**
     * parameter secret value, only one of (string*value, int*value, docker*image*tag*value, secret*value) can be set
     */
    secretValue?: outputs.ReleaseChannelServiceInstanceProtectionRefParameterSecretValue;
    /**
     * string value of the constant
     */
    stringValue?: string;
}

export interface ReleaseChannelServiceInstanceProtectionRefParameterSecretValue {
    /**
     * Name of the secret.
     */
    key: string;
    /**
     * Version of the secret
     */
    version: string;
}

export interface ReleaseChannelSharedManualApprovalPrecondition {
    /**
     * name of the manual approval
     */
    name: string;
}

