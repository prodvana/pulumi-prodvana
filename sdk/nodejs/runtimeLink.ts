// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * (Alpha! This feature is still in progress.)
 * A `runtimeLink` resource represents a successfully linked runtime.
 * This is most useful for Kubernetes runtimes -- the agent must be installed and registered with the Prodvana service before the runtime can be used.
 * Pair this with an explicit `dependsOn` block ensures that the runtime is ready before attempting to use it. See the example below.
 */
export class RuntimeLink extends pulumi.CustomResource {
    /**
     * Get an existing RuntimeLink resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RuntimeLinkState, opts?: pulumi.CustomResourceOptions): RuntimeLink {
        return new RuntimeLink(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'prodvana:index/runtimeLink:RuntimeLink';

    /**
     * Returns true if the given object is an instance of RuntimeLink.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RuntimeLink {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RuntimeLink.__pulumiType;
    }

    /**
     * Name of the runtime to wait for linking.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * How long to wait for the runtime linking to complete. A valid Go duration string, e.g. `10m` or `1h`. Defaults to `10m`
     */
    public readonly timeout!: pulumi.Output<string>;

    /**
     * Create a RuntimeLink resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: RuntimeLinkArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RuntimeLinkArgs | RuntimeLinkState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RuntimeLinkState | undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
        } else {
            const args = argsOrState as RuntimeLinkArgs | undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RuntimeLink.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RuntimeLink resources.
 */
export interface RuntimeLinkState {
    /**
     * Name of the runtime to wait for linking.
     */
    name?: pulumi.Input<string>;
    /**
     * How long to wait for the runtime linking to complete. A valid Go duration string, e.g. `10m` or `1h`. Defaults to `10m`
     */
    timeout?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RuntimeLink resource.
 */
export interface RuntimeLinkArgs {
    /**
     * Name of the runtime to wait for linking.
     */
    name?: pulumi.Input<string>;
    /**
     * How long to wait for the runtime linking to complete. A valid Go duration string, e.g. `10m` or `1h`. Defaults to `10m`
     */
    timeout?: pulumi.Input<string>;
}
