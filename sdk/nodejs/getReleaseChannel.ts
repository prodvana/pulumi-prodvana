// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Prodvana Release Channel
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as prodvana from "@pulumi/prodvana";
 *
 * const example = prodvana.getReleaseChannel({
 *     application: "my-app",
 *     name: "my-rc",
 * });
 * ```
 */
export function getReleaseChannel(args: GetReleaseChannelArgs, opts?: pulumi.InvokeOptions): Promise<GetReleaseChannelResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("prodvana:index/getReleaseChannel:getReleaseChannel", {
        "application": args.application,
        "constants": args.constants,
        "convergenceProtections": args.convergenceProtections,
        "disableAllProtections": args.disableAllProtections,
        "manualApprovalPreconditions": args.manualApprovalPreconditions,
        "name": args.name,
        "policy": args.policy,
        "protections": args.protections,
        "releaseChannelStablePreconditions": args.releaseChannelStablePreconditions,
        "serviceInstanceProtections": args.serviceInstanceProtections,
    }, opts);
}

/**
 * A collection of arguments for invoking getReleaseChannel.
 */
export interface GetReleaseChannelArgs {
    /**
     * Name of the Application this Release Channel belongs to
     */
    application: string;
    /**
     * Constant values for this release channel
     */
    constants?: inputs.GetReleaseChannelConstant[];
    /**
     * Feature Coming Soon
     */
    convergenceProtections?: inputs.GetReleaseChannelConvergenceProtection[];
    /**
     * Disable all protections for this release channel
     */
    disableAllProtections?: boolean;
    /**
     * Preconditions requiring manual approval before this release channel can be deployed
     */
    manualApprovalPreconditions?: inputs.GetReleaseChannelManualApprovalPrecondition[];
    /**
     * Release Channel name
     */
    name: string;
    /**
     * Release Channel policy applied to all services
     */
    policy?: inputs.GetReleaseChannelPolicy;
    /**
     * Protections applied this release channel
     */
    protections?: inputs.GetReleaseChannelProtection[];
    /**
     * Preconditions requiring other release channels to be stable before this release channel can be deployed
     */
    releaseChannelStablePreconditions?: inputs.GetReleaseChannelReleaseChannelStablePrecondition[];
    /**
     * Protections applied to service instances in this release channel
     */
    serviceInstanceProtections?: inputs.GetReleaseChannelServiceInstanceProtection[];
}

/**
 * A collection of values returned by getReleaseChannel.
 */
export interface GetReleaseChannelResult {
    /**
     * Name of the Application this Release Channel belongs to
     */
    readonly application: string;
    /**
     * Constant values for this release channel
     */
    readonly constants?: outputs.GetReleaseChannelConstant[];
    /**
     * Feature Coming Soon
     */
    readonly convergenceProtections?: outputs.GetReleaseChannelConvergenceProtection[];
    /**
     * Disable all protections for this release channel
     */
    readonly disableAllProtections?: boolean;
    /**
     * Release channel identifier
     */
    readonly id: string;
    /**
     * Preconditions requiring manual approval before this release channel can be deployed
     */
    readonly manualApprovalPreconditions?: outputs.GetReleaseChannelManualApprovalPrecondition[];
    /**
     * Release Channel name
     */
    readonly name: string;
    /**
     * Release Channel policy applied to all services
     */
    readonly policy: outputs.GetReleaseChannelPolicy;
    /**
     * Protections applied this release channel
     */
    readonly protections?: outputs.GetReleaseChannelProtection[];
    /**
     * Preconditions requiring other release channels to be stable before this release channel can be deployed
     */
    readonly releaseChannelStablePreconditions?: outputs.GetReleaseChannelReleaseChannelStablePrecondition[];
    /**
     * Release Channel policy applied to all services
     */
    readonly runtimes: outputs.GetReleaseChannelRuntime[];
    /**
     * Protections applied to service instances in this release channel
     */
    readonly serviceInstanceProtections?: outputs.GetReleaseChannelServiceInstanceProtection[];
    /**
     * Current application version
     */
    readonly version: string;
}
/**
 * Prodvana Release Channel
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as prodvana from "@pulumi/prodvana";
 *
 * const example = prodvana.getReleaseChannel({
 *     application: "my-app",
 *     name: "my-rc",
 * });
 * ```
 */
export function getReleaseChannelOutput(args: GetReleaseChannelOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetReleaseChannelResult> {
    return pulumi.output(args).apply((a: any) => getReleaseChannel(a, opts))
}

/**
 * A collection of arguments for invoking getReleaseChannel.
 */
export interface GetReleaseChannelOutputArgs {
    /**
     * Name of the Application this Release Channel belongs to
     */
    application: pulumi.Input<string>;
    /**
     * Constant values for this release channel
     */
    constants?: pulumi.Input<pulumi.Input<inputs.GetReleaseChannelConstantArgs>[]>;
    /**
     * Feature Coming Soon
     */
    convergenceProtections?: pulumi.Input<pulumi.Input<inputs.GetReleaseChannelConvergenceProtectionArgs>[]>;
    /**
     * Disable all protections for this release channel
     */
    disableAllProtections?: pulumi.Input<boolean>;
    /**
     * Preconditions requiring manual approval before this release channel can be deployed
     */
    manualApprovalPreconditions?: pulumi.Input<pulumi.Input<inputs.GetReleaseChannelManualApprovalPreconditionArgs>[]>;
    /**
     * Release Channel name
     */
    name: pulumi.Input<string>;
    /**
     * Release Channel policy applied to all services
     */
    policy?: pulumi.Input<inputs.GetReleaseChannelPolicyArgs>;
    /**
     * Protections applied this release channel
     */
    protections?: pulumi.Input<pulumi.Input<inputs.GetReleaseChannelProtectionArgs>[]>;
    /**
     * Preconditions requiring other release channels to be stable before this release channel can be deployed
     */
    releaseChannelStablePreconditions?: pulumi.Input<pulumi.Input<inputs.GetReleaseChannelReleaseChannelStablePreconditionArgs>[]>;
    /**
     * Protections applied to service instances in this release channel
     */
    serviceInstanceProtections?: pulumi.Input<pulumi.Input<inputs.GetReleaseChannelServiceInstanceProtectionArgs>[]>;
}
